
<h1>Aberrant Expression Plots</h1>
<!--begin.rcode AE_summary, eval =!is.null(plotter$hash_vars$)
<!--begin.rcode AE_heatmaps, eval=!is.null(plotter$hash_vars$processed_AE_results.tsv)
    groups <- "processed"
    if(!is.null(plotter$hash_vars$imported_AE_results.tsv)) {
        groups <- c(groups, "imported")
    }
    for (group in groups) {
        cat(paste0("<h2>Aberrants detected in ", group," samples</h2>"))
        cat(plotter$static_ggplot_main(paste0(group, "_AE_results.tsv"), header = TRUE, text = "dynamic",
            plotting_function = function(ggplot_obj) {
                ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
                ggplot2::geom_tile(show.legend = TRUE) +
                ggplot2::theme_minimal() +
                ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
                ggplot2::theme(
                    axis.text.x = ggplot2::element_text(
                                    angle = 25, face = "bold", hjust = 1),
                    axis.text.y = ggplot2::element_text(face = "bold")
                    ) +
                ggplot2::scale_fill_gradient2(
                    low = "#0000D5", mid= "#FFFFFF", high = "#D50000",
                    na.value = "grey50", guide = "colourbar",
                    aesthetics = "fill")
            }))
    }
end.rcode-->

<!--begin.rcode No_AE_heatmaps, eval=is.null(plotter$hash_vars$processed_AE_results.tsv)
    cat("<h2>No aberrantly expressed genes found in dataset</h2>")
end.rcode-->

<!--begin.rcode AS_heatmaps, eval=!is.null(plotter$hash_vars$processed_AS_psi3_results.tsv)
    cat("<h1>Aberrant Splicing Plots</h1>")
        groups <- "processed"
        metrics <- c("psi3", "psi5", "theta")
    if(!is.null(plotter$hash_vars$imported_AS_psi3_results.tsv)) {
        groups <- c(groups, "imported")
    }
    cat("<ul>\n
            <li> Only samples with at least one aberrantly spliced gene are shown </li>\n
            <li> Only genes aberrantly spliced in at least one sample are shown </li>\n
            <li> Metrics show deviation from mean splicing metric </li>\n
            <li> Psi3 => canonic acceptor rate </li>\n
            <li> Psi5 => canonic donor rate </li>\n
            <li> Theta => splicing efficiency </li>\n
            <li> Number inside field represents number of splicing events </li>\n
        </ul>")
    for (group in groups) {
        cat(paste0("<h2>Aberrants detected in ", group," samples</h2>"))
        for (metric in metrics) {
            cat(paste0("<h2>Aberrant ", metric," events</h2>"))
            cat(plotter$static_ggplot_main(paste0(group, "_AS_", metric, "_results.tsv"), header = TRUE, text = "dynamic", resizable = TRUE,
            plotting_function = function(ggplot_obj) {
                    ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
                    ggplot2::geom_tile(show.legend = TRUE) +
                    ggplot2::geom_text(mapping = ggplot2::aes(label=spliceSites), size = 2) +
                    ggplot2::theme_minimal() +
                    ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
                    ggplot2::theme(text = ggplot2::element_text(size=8)) +
                    ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 25, face = "bold", hjust = 1), axis.text.y = ggplot2::element_text(face = "bold")) +
                    ggplot2::scale_fill_gradient2(low = "#0000D5", mid= "#FFFFFF", high = "#D50000", na.value = "grey50", guide = "colourbar", aesthetics = "fill")
                }))
            }
        }
end.rcode-->

<!--begin.rcode MAE_heatmaps, eval=!is.null(plotter$hash_vars$MAE_results.tsv)
    cat("<h1>Monoallelic expression plots</h1>\n
        <ul>\n
            <li> Technical test. Performed on RNA variant-called VCFs, NOT the intended way to use this module. </li>\n
        </ul>")
    cat(plotter$static_ggplot_main("MAE_results.tsv", header = TRUE, text = "dynamic", resizable = TRUE,
        plotting_function = function(ggplot_obj) {
            ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
            ggplot2::geom_tile(show.legend = TRUE) +
            ggplot2::theme_minimal() +
            ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
            ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 25, face = "bold", hjust = 1), axis.text.y = ggplot2::element_text(face = "bold")) +
            ggplot2::scale_fill_gradient2(low = "#0000D5", mid= "#FFFFFF", high = "#D50000", na.value = "grey50", guide = "colourbar", aesthetics = "fill")
    }))
end.rcode-->


<br><br><br>
