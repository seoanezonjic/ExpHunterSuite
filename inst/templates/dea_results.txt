<!--begin.rcode setup
	plot_DEG_results <- function(ggplot_obj) {
		ggplot_obj + ggplot2::aes(gene_type, total) + ggplot2::coord_flip() +
		ggplot2::ylab("Number of genes") +  ggplot2::xlab("") +
		ggplot2::geom_bar(position="dodge", stat="identity", show.legend=FALSE,
						  fill=c("#000034", "red", "orange", "blue")) +
		ggplot2::geom_text(ggplot2::aes(label = total, y = total + 1500)) + 
		ggplot2::theme(text = ggplot2::element_text(face="bold", size=10))
	}
	custom_ht2logFCPlot <- function(plot_data) {
		ht2logFCPlot(plot_data, var_filter = var_thr,
					 title = paste0("(variance threshold >= ",var_thr,")"))
	}
	p_seguros_Int <- function(ggplot_obj) {
		ggplot_obj + ggplot2::aes(x = package_name, y = value, color = package_name) +
		ggplot2::geom_boxplot(outlier.colour = grDevices::rgb(0, 0, 0, 0)) + 
		ggplot2::theme_bw(base_size = 30) + ggplot2::ylab("1 - precision (FDR)") + 
		ggplot2::geom_point(position = ggplot2::position_jitter(w = 0.1), color = "grey50", size = 1) + 
		ggplot2::geom_hline(ggplot2::aes(yintercept = plotter$hash_vars$opt$p_val_cutoff)) + 
		ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) + 
		ggplot2::xlab("") + ggplot2::scale_colour_discrete(guide = "none") + 
		ggplot2::coord_cartesian(ylim = c(0, plotter$hash_vars$opt$p_val_cutoff))
	}

	DE_volcano <- function(plot_data) {
		EnhancedVolcano::EnhancedVolcano(plot_data, 
		lab=rownames(plot_data), x="mean_logFCs", y="combined_FDR",
		boxedLabels = TRUE, drawConnectors = TRUE, cutoffLineType = 3,    
		pCutoff = plotter$hash_vars$opt$p_val_cutoff, title = NULL,
		subtitle = NULL, FCcutoff = plotter$hash_vars$opt$lfc, 
		ylab = bquote(~-Log[10] ~ italic(FDR)), caption=NULL,
		legendLabels = c("NS", expression(Log[2] ~ FC), "FDR",
						 expression(FDR ~ and ~ log[2] ~ FC)), 
		legendPosition = 'right', shapeCustom = custom_shapes) +
		ggplot2::geom_hline(data = mean_wt,
		ggplot2::aes(yintercept = nlFDR, linetype=factor(FDR)),
		color = c("red", rep("black", times=nrow(mean_wt)-1)))
	}

	norm_plot <- function(ggplot_obj) {
		ggplot_obj + ggplot2::aes(x = sums, y = eff_lib_size, group = Treat) + 
		ggplot2::geom_point(ggplot2::aes(shape = Treat, color = Treat, size = 8)) +
		ggplot2::geom_smooth(method = "lm", fill = NA, ggplot2::aes(color = Treat))+
		ggplot2::xlab("Library size (N reads)") + ggplot2::theme_classic() +
        ggplot2::ylab("Effective library size \n(DESeq2 normalization factor)") +
		ggplot2::theme(axis.text = ggplot2::element_text(size= 10), 
			axis.title = 	ggplot2::element_text(size = 8, face = "bold"),
			legend.title = ggplot2::element_text(size = 8, face = "bold")) +
		ggplot2::guides(size = FALSE)
	}

	plot_MA <- function() {
		DESeq2::plotMA(data_frame, cex.lab=1.6, cex.axis=1.5)
	}

	plot_deseq_norm <- function() {
		gplots::heatmap.2(data_frame, labRow = FALSE, dendrogram = "column",
						  col = colorRampPalette(c("#FFFFCC", "#FD8D3C", "#800026"))(20),
						  trace = "none", srtCol=45, adjCol = c(1,1))
	}

	plot_pval_distr <- function(ggplot_obj) {
		ggplot_obj + ggplot2::aes(x=value) + ggplot2::geom_density() +
		ggplot2::facet_grid(. ~variable)
	}

	plot_FDR_corr <- function() {
		PerformanceAnalytics::chart.Correlation(data_frame[, columns],
			histogram=TRUE, pch=19, log="xy", na.action = na.omit)
	}
	aux_func <- function(data_frame){
			eval(parse(text = paste(deparse(plotting_function),
					   collapse ="\n")))}

	plot_edgeR_MA <- function(ggplot_obj) {
		plot(data_frame$logCPM, data_frame$logFC, pch = 20, cex.lab = 1.5,
			 cex.axis = 1.5, main='edgeR: Fold change vs abundance')
		subs_df <- subset(data_frame, FDR < p_val_cutoff)
		points(subs_df$logCPM, subs_df$logFC, pch = 20, col = 'red')
		abline(h=c(-1,1), col='blue')
	}

	plot_limma_volcano <- function() {
		plot(x = data_frame[['limma']]$logFC, y = -log10(data_frame[['limma']]$adj.P.Val),
		main = c('groupsB-groupsA'), xlab = 'logFC', ylab = '-log10 adjusted p-value',
		col = c('blue', 'red')[limma_sig], pch = 20, cex.lab = 1.6, cex.axis = 1.5)
		abline(v = lfc, col = "cyan")
		abline(v = -lfc, col = "cyan")
		abline(h = -log10(p_val_cutoff), col = "red", lty = "dashed")
	}

	NOISeq_plot <- function() {
		NOISeq::DE.plot(data_frame[["NOISeq"]], q = q_value, graphic = "MD",
			cex.lab = 1.4, cex.axis=1.4)
	}
	
end.rcode-->

<!--begin.rcode dea_results_title
	cat(plotter$create_title("Details of input data", id = "main_dea_title", hlevel = 2,
							  indexable = TRUE))
end.rcode-->F
<!--begin.rcode control_table, echo = FALSE, warning=FALSE
	cat(plotter$create_title("First group of samples (to be referred to as control in the rest of the report)",
							  id = "control_table", hlevel = 3, indexable = FALSE))
	knitr::kable(plotter$hash_vars$index_control_cols, col.names="Sample Names:")
end.rcode-->

<!--begin.rcode treatment_table, echo = FALSE, warning=FALSE
	cat(plotter$create_title("Second group of samples (to be referred to as treatment in the rest of the report)",
							  id = "treatment_table", hlevel = 3, indexable = FALSE))
	knitr::kable(plotter$hash_vars$index_treatmn_cols, col.names="Sample Names:")
end.rcode-->

<!--begin.rcode plots_configuration_and_legend, echo = FALSE, warning=FALSE
	# this counter is defined for plotting graphs with plot_in_div function. If not defined as a number, plots can be mixed.
	# htmlreportR makes this obsolete. I'm not touching it until we're finished, just to be safe.
	plot_counter <- 1 
	cat(plotter$create_title("DEgenes Hunter results", id = "hunter_results", hlevel = 2, indexable = TRUE))
	cat(plotter$create_title("Gene classification by DEgenes Hunter", id = "hunter_class",
							  hlevel = 3, indexable = FALSE))
	cat("<p>DEgenes Hunter uses multiple DE detection packages to analyse all genes in the input count table and labels them accordingly.</p>")
	cat("<p>Note: A positive log fold change shows higher expression in the treatment group; a negative log fold change represents higher expression in the control group.</p>")
	cat(paste0("<ul>\n",
		   "<li> <strong>Filtered out:</strong> Genes discarded during the filtering process as showing no or very low expression.</li>\n",
		   "<li> <strong>Prevalent DEG:</strong> Genes considered as differentially expressed (DE) by at least ", plotter$hash_vars$opt$minpack_common, " packages, as specified by the `minpack_common` argument.</li>\n",
		   "<li> <strong>Possible DEG:</strong> Genes considered DE by at least one of the DE detection packages.</li>\n",
		   "<li> <strong>Not DEG:</strong> Genes not considered DE in any package.</li>\n",
			"</ul>"))
end.rcode-->

<!--begin.rcode qc, echo = FALSE
	cat(paste0("<p>This barplot shows the total number of genes passing each stage of analysis - from the total number of genes in the input table of counts, to the genes surviving the expression filter, to the genes detected as DE by one package, to the genes detected by at least ", plotter$hash_vars$opt$minpack_common, " packages.</p>"))
	# Create genes barplot
	barplot_df <- data.frame(total=c(
			sum(plotter$hash_vars$DE_all_genes[, "genes_tag"] %in% c("PREVALENT_DEG", "POSSIBLE_DEG", "NOT_DEG", "FILTERED_OUT")),
			sum(plotter$hash_vars$DE_all_genes[, "genes_tag"] %in% c("PREVALENT_DEG", "POSSIBLE_DEG", "NOT_DEG")),
			sum(plotter$hash_vars$DE_all_genes[, "genes_tag"] %in% c("PREVALENT_DEG", "POSSIBLE_DEG")),
			sum(plotter$hash_vars$DE_all_genes[, "genes_tag"] %in% c("PREVALENT_DEG"))
			),
		  gene_type=c("Total genes", "Genes passing expression filter", "DEGs considered possible or prevalent", "Prevalent DEGs")
		)
	barplot_df[,"gene_type"] <- factor(barplot_df[,"gene_type"], levels = barplot_df[,"gene_type"][order(barplot_df[,"total"])])
	plotter$hash_vars$barplot_df <- barplot_df
	# Reorder to plot from most to least
	# Plot genes barplot
	cat(plotter$prettify_div(plotter$barplot(list(id = "barplot_df", title = "DEG selection",
											 row_names = TRUE, header = NULL, text = FALSE, fields = 2:1,
											 transpose = FALSE, config = list('xAxisTitle' = 'Number of genes',
											 smpLabelImage = TRUE))),
							 preset = "magic"))
end.rcode-->

<!--begin.rcode Venn_d, echo = FALSE, fig.height=12, fig.width=12
	cat(plotter$create_title("Package DEG detection stats", hlevel = 3, id = "DEG_title", indexable = FALSE))
	cat("<p>This is the Venn Diagram of all possible DE genes (DEGs) according to at least one of the
		 selected DE detection packages</p>")
	sets <- list()
	for(DEG_pack in plotter$hash_vars$DEG_pack_columns){
		pack <- unlist(strsplit(DEG_pack, split='_'))[1] # Get the name of the package
		sets[[pack]] <- row.names(plotter$hash_vars$DE_all_genes)[which(plotter$hash_vars$DE_all_genes[,DEG_pack] == TRUE)] # 
	}
	items <- unique(unlist(sets))

	# Per each item, check sets
	belonging <- unlist(lapply(sets, function(set){items %in% set}))
	belonging <- matrix(as.numeric(belonging),ncol = length(sets))
	# Add set names
	colnames(belonging) <- names(sets)
	# Calculate intersections
	intersections <- limma::vennCounts(belonging)
	intersections[1, "Counts"] <- NA
	plotter$hash_vars$intersections <- intersections
	## Only way to make colors accessible in "autoplot" mode.
	venn_colors <<- grDevices::rainbow(length(sets))
	# Plot
	cat(plotter$prettify_div(plotter$static_plot_main("intersections", resizable = TRUE,
		    header = NULL, row_names = NULL, custom_format = TRUE, plot_type = "autoplot",
	        plotting_function = function(){
	      		limma::vennDiagram(data_frame, circle.col = venn_colors)
	      	}), preset = "magic"))

end.rcode-->

<!--begin.rcode setup_logFCplots, echo = FALSE
var_thr <- 0.01
end.rcode-->

<!--begin.rcode logFCplots, echo = FALSE, eval=(!grepl("F", plotter$hash_vars$opt$modules) && sum(grepl("logFC_", colnames(plotter$hash_vars$DE_all_genes))) > 1), results = "asis"
	cat(plotter$create_title("Plot showing variability between different DEG detection methods in terms of logFC calculation",
		id = "DEG_var", hlevel = 3, indexable = FALSE))
	cat(paste0("<p>This graph shows logFC calculated (y-axis) for each package (points) and gene (x-axis). Only genes with variability over ",
			   var_thr, " will be plotted. This representation allows to user to observe the behaviour of each DE package and see if one of them has atypical results."))
    cat("<p>If there are no genes showing sufficient variance in estimated logFC accross methods, no plot will be produced and a warning message will be given.</p>")
    var_filter <- var_thr
    cat(plotter$prettify_div(plotter$static_plot_main(id = "DE_all_genes", header = NULL, row_names = NULL,
    						 plotting_function = custom_ht2logFCPlot), preset = "magic"))
end.rcode-->

<!--begin.rcode FDR_bench
	cat(plotter$create_title("FDR gene-wise benchmarking", id = "FDR_bench", hlevel = 3, indexable = TRUE))
	cat("<p>Benchmark of false positive calling:
		Boxplot of FDR values among all genes with an FDR <= 0.05 in at least one DE detection package</p>")
	df <- plotter$hash_vars$DE_all_genes[plotter$hash_vars$DE_all_genes[, "genes_tag"] == "PREVALENT_DEG",]
	df <- df[plotter$hash_vars$final_FDR_names]
	df$gene_names <- row.names(df)
	df_melted_FDR <- reshape2::melt(df, id.vars = "gene_names", measure.vars = plotter$hash_vars$final_FDR_names)
	df_melted_FDR[,"package_name"] <- unlist(lapply(strsplit(as.character(df_melted_FDR[, "variable"]), split='_'), function(x) x[2])) # Ugly way to remove FDR_ from names
	plotter$hash_vars$df_melted_FDR <- df_melted_FDR
	if(dim(df)[1] == 0){
		cat("No Prevalent DEGs found, Bar charts of FDR values for prevalent genes cannot be shown")
	} else {
		cat(plotter$prettify_div(plotter$boxplot(list(id = "df_melted_FDR", header = NULL, text = FALSE, fields = c(1, 3:4),
			format = "long", row_names = FALSE, transpose = TRUE, smp_attr = c(1, 4), group = "package_name",
			showBoxplotOriginalData = TRUE, config = list(graphOrientation = "vertical"))), preset = "magic"))
	}
end.rcode-->

<!--begin.rcode FDR_volcano, echo = FALSE, warning=FALSE
	cat(plotter$create_title("FDR Volcano Plot showing log 2 fold change vs. FDR", id = "FDR_volc", hlevel = 3, indexable = FALSE))
	cat(paste0("<p>The red horizontal line represents the FDR threshold, which has been set to ", plotter$hash_vars$opt$p_val_cutoff,
			  "<br>The black lines represent other values."))
	volcano_DE_all_genes <- plotter$hash_vars$DE_all_genes
	volcano_DE_all_genes <- volcano_DE_all_genes[volcano_DE_all_genes$genes_tag != "FILTERED_OUT",]

	if (any(volcano_DE_all_genes$combined_FDR[!is.na(volcano_DE_all_genes$combined_FDR)] == 0)){
		min_FDR <- min(volcano_DE_all_genes$combined_FDR[volcano_DE_all_genes$combined_FDR != 0 &
																										 !is.na(volcano_DE_all_genes$combined_FDR)])
		volcano_DE_all_genes[volcano_DE_all_genes$combined_FDR == 0 &
												 !is.na(volcano_DE_all_genes$combined_FDR), "combined_FDR"] <- min_FDR
	}
	custom_shapes <- ifelse(volcano_DE_all_genes$genes_tag == "PREVALENT_DEG", 16,
							ifelse(volcano_DE_all_genes$genes_tag == "POSSIBLE_DEG", 0, 3)) 
	names(custom_shapes) <- volcano_DE_all_genes$genes_tag
	plotter$hash_vars$volcano_DE_all_genes <- volcano_DE_all_genes
	fc_thresholds <- c(0.01, 0.05,0.1, 0.2)
	all_thresholds <- unique(c(plotter$hash_vars$opt$p_val_cutoff, fc_thresholds))
	mean_wt = data.frame(FDR = all_thresholds, nlFDR = -log10(all_thresholds))
	cat(plotter$prettify_div(plotter$static_plot_main("volcano_DE_all_genes", custom_format = TRUE,
                             plotting_function = DE_volcano), preset = "magic"))
end.rcode-->

<!--begin.rcode config_DEA_PCA, echo = FALSE, results = "asis", warning = TRUE, message = TRUE, eval = !is.null(plotter$hash_vars$PCA_res$DEGs)
	pca_data <- plotter$hash_vars$PCA_res$DEGs$pca_data
	dim_to_keep <- plotter$hash_vars$PCA_res$DEGs$dim_to_keep
	dim_data <- plotter$hash_vars$PCA_res$DEGs$dim_data
	dim_data_merged <- plotter$hash_vars$PCA_res$DEGs$dim_data_merged
	res.hcpc <- plotter$hash_vars$PCA_res$DEGs$res.hcpc
	called_from <- "dea_results"
end.rcode-->

<!--begin.rcode DEA_PCA, eval = !is.null(plotter$hash_vars$PCA_res$DEGs)
	child <- knitr::knit_expand(file.path(template_folder, "facto_miner.txt"))
	cat(knitr::knit_child(text = child, quiet = TRUE), sep = "\n")
end.rcode-->

<!--begin.rcode DESeq2_conditional_block_sample_rank_head,
	cat("<p>DEgenes Hunter differential expression analysis results can be found in file Common_results/hunter_results_table.txt</p>")
	cat(plotter$create_title("DE detection package-specific results", id = "DE_packages", hlevel = 2,
							  indexable = TRUE))
	cat("<p>Various plots specific to each package are shown below:<p>")
end.rcode-->

<!--begin.rcode DESeq2_conditional_block_sample_rank_plot, eval="DESeq2" %in% names(plotter$hash_vars$all_counts_for_plotting), echo=FALSE, warning = FALSE, message = FALSE
	effective_lib_size <- DESeq2::sizeFactors(plotter$hash_vars$package_objects[['DESeq2']][['DESeq2_dataset']])
	effective_lib_size <- effective_lib_size[match(plotter$hash_vars$coverage_df$sample_ID, names(effective_lib_size))] 
	sample_rank <- plotter$hash_vars$coverage_df$sample_rank
	size_vs_rank <- data.frame(sample_rank = sample_rank, eff_lib_size = effective_lib_size)
	plotter$hash_vars$size_vs_rank <- size_vs_rank
	if (!is.null(plotter$hash_vars$library_sizes)) {
		xtitle="Sample Rank (total reads)"
	} else {
		xtitle="Sample Rank (total counts)"
    }
    cat(plotter$prettify_div(plotter$scatter2D(list(id = "size_vs_rank", header = NULL, title = "DESeq2 size factor vs. sample rank",
    	row_names = NULL, x_label = xtitle, y_label = "Effective library size (DESeq2 normalization factor)",
    	text = FALSE)), preset = "magic"))
    cat("<p>The effective library size is the factor used by DESeq2 normalization algorithm for each sample. The effective library size must be dependent of raw library size.</p>")
end.rcode-->

<!--begin.rcode DESeq2_ELS, eval="DESeq2" %in% names(plotter$hash_vars$all_counts_for_plotting), echo=FALSE, results='asis'
	cat(plotter$create_title("DESeq2 normalization effects", id = "DE_norm_eff", hlevel = 3,
							  indexable = FALSE))
	cat("<p>This plot compares the effective library size with raw library size</p>")
	effective_lib_size <- DESeq2::sizeFactors(plotter$hash_vars$package_objects[['DESeq2']][['DESeq2_dataset']])
	sums <- colSums(plotter$hash_vars$raw_filter)
	norm_bias <- data.frame(sums = sums, 
							eff_lib_size = effective_lib_size,
							Treat = plotter$hash_vars$design_vector)
	rownames(norm_bias) <- names(sums)
	plotter$hash_vars$norm_bias <- norm_bias
	cat(plotter$prettify_div(plotter$static_ggplot_main(id = "norm_bias", header = NULL, row_names = NULL,
		resizable = TRUE, plotting_function = norm_plot), preset = "magic"))
	cat("<p>The effective library size is the factor used by DESeq2 normalization algorithm for each sample. The effective library size must be dependent of raw library size.</p>")
	cat(plotter$create_title("DESeq2 MA plot", id = "DE_MA", hlevel = 3, indexable = FALSE))
	cat("<p> This is the MA plot from DESeq2 package")
	plotter$hash_vars$ma_data <- plotter$hash_vars$package_objects[['DESeq2']][['de_deseq2']]
	cat(plotter$prettify_div(plotter$static_plot_main("ma_data", custom_format = TRUE, plotting_function = plot_MA,
		plot_type = "autoplot"), preset = "magic"))
	cat("<p>In DESeq2, the MA-plot (log ratio versus abundance) shows the log2 fold changes are attributable to a given variable over the mean of normalized counts. Points will be colored red if the adjusted Pvalue is less than 0.1. Points which fall out of the window are plotted as open triangles pointing either up or down.
		 A table containing the DESeq2 DEGs is provided: in Results\\_DESeq2/DEgenes\\_DESEq2.txt
		 A table containing the DESeq2 normalized counts is provided in Results\\_DESeq2/Normalized\\_counts\\_DESEq2.txt</p>")
	cat(plotter$create_title("Differences between samples by PREVALENT DEGs normalized counts",
		id = "DE_prevalents", hlevel = 3, indexable = FALSE))
	cat("<p>Counts of prevalent DEGs were normalizated by DESeq2 algorithm. This count were scaled by log10 and plotted in a heatmap.</p>")
	DE_prevalent_genes <- rownames(plotter$hash_vars$DE_all_genes[plotter$hash_vars$DE_all_genes[, "genes_tag"] %in% c("PREVALENT_DEG"), ])
	if(length(DE_prevalent_genes) > 1){
		deseq_prevalent_normalized <- plotter$hash_vars$deseq_normalized_data[rownames(plotter$hash_vars$deseq_normalized_data) %in% DE_prevalent_genes, ]  
		deseq_normalized_data_mtx <- log10(data.matrix(deseq_prevalent_normalized) + 1)
		plotter$hash_vars$deseq_normalized_data_mtx <- deseq_normalized_data_mtx
		cat(plotter$prettify_div(plotter$static_plot_main("deseq_normalized_data_mtx", header = NULL,
			row_names = NULL, resizable = TRUE, plotting_function = plot_deseq_norm, custom_format = TRUE,
			plot_type = "autoplot"), preset = "magic"))
	}else{
        cat("<p>Fewer than 2 prevalent differential expressed genes were found</p>")
	}
end.rcode-->

<!--begin.rcode edgeR_conditional_block, eval='edgeR' %in% names(plotter$hash_vars$all_counts_for_plotting), echo=FALSE, results='asis'
	cat(plotter$create_title("edgeR MA plot", id = "edgeR_MA", hlevel = 3, indexable = FALSE))
	cat("<p>This is the MA plot from package edgeR</p>")
	plotter$hash_vars$full_edgeR <- plotter$hash_vars$all_counts_for_plotting[['edgeR']]
	# Only way to make it accessible in autoplot
	p_val_cutoff <<- plotter$hash_vars$opt$p_val_cutoff
	cat(plotter$prettify_div(plotter$static_plot_main("full_edgeR", header = NULL, row_names = NULL,
		resizable = TRUE, plotting_function = plot_edgeR_MA, custom_format = TRUE, plot_type = "autoplot"),
	    preset = "magic"))
	cat("Differential gene expression data can be visualized as MA-plots (log ratio versus abundance) where each dot represents a gene. The differentially expressed genes are colored red and the non-differentially expressed ones are colored black.
		 A table containing the edgeR DEGs is provided in Results\\_edgeR/DEgenes\\_edgeR.txt
		 A table containing the edgeR normalized counts is provided in Results\\_edgeR/Normalized\\_counts\\_edgeR.txt")
end.rcode-->

<!--begin.rcode limma_conditional_block, eval='limma' %in% names(plotter$hash_vars$all_counts_for_plotting), echo=FALSE, results='asis'
	cat(plotter$create_title("limma Volcano plot", id = "limma_volcano", hlevel = 3, indexable = FALSE))
	cat("<p>Volcano plot of log2-fold change versus -log10 of adjuster p-values for all genes according to limma analysis")
	limma_sig <<- row.names(plotter$hash_vars$all_counts_for_plotting[['limma']]) %in% row.names(plotter$hash_vars$DE_all_genes[plotter$hash_vars$DE_all_genes$limma_DEG == TRUE, ]) + 1
	p_val_cutoff <<- plotter$hash_vars$opt$p_val_cutoff
	lfc <<- plotter$hash_vars$opt$lfc
	cat(plotter$prettify_div(plotter$static_plot_main("all_counts_for_plotting", header = NULL, plot_type = "autoplot",
		row_names = NULL, resizable = TRUE, plotting_function = plot_limma_volcano, custom_format = TRUE),
		preset = "magic"))
	cat("<p>Limma DEGs table can be found in Results_limma/DEGenes_limma.txt</p>")
	cat("<p>Limma normalized counts table can be found in Results_limma/Normalized_counts_limma.txt</p>")
end.rcode-->

<!--begin.rcode NOISeq_conditional_block, eval='NOISeq' %in% names(plotter$hash_vars$all_counts_for_plotting), echo=FALSE, results='asis'
	cat(plotter$create_title("NOISEeq Expression plot", hlevel = 3, id = "Noiseq_title", indexable = FALSE))
	cat("<p> This plot represents (M, D) values (black) and differentially expressed genes (red)
		from the NOISeq package (Image extracted from file {'ExpressionPlot.pdf'}):</p>")
	q_value <<- 1 - plotter$hash_vars$opt$p_val_cutoff # Differential expression threshold for creating plot
	cat(plotter$prettify_div(plotter$static_plot_main("package_objects", header = NULL, row_names = NULL,
		resizable = TRUE, plotting_function = NOISeq_plot, custom_format = TRUE, plot_type = "autoplot"),
		preset = "magic"))
	cat("<p>NOISeq DEgs table can be found in Results_NOISEQ/Degenes_NOISeq.txt.</p>")
	cat("<p>NOISeq normalized counts can be found in Results_NOISeq/Normalized_counts_NOISeq.txt</p>")
end.rcode-->

<!--begin.rcode pval_distr, echo = FALSE, warning = FALSE
	cat(plotter$create_title("Detailed package results comparison", id = "Det_res",
		hlevel = 2, indexable = TRUE))
	cat("<p>This is an advanced section that allows comparing the output of packages unadjusted
		for DE analysis. The data shown here do not necessarily reflect biological impact.</p>")
	cat(plotter$create_title("P-value distributions", id = "p_distr",
		hlevel = 3, indexable = FALSE))
	cat("<p>Distributions of p-values, unadjusted and adjusted for multiple testing (FDR)</p>")
	df <- plotter$hash_vars$DE_all_genes[plotter$hash_vars$DE_all_genes$genes_tag != "FILTERED_OUT", ]
	df$gene_names <- row.names(df)
	plotter$hash_vars$df <- df
	plotter$hash_vars$df_melted_pval <- reshape2::melt(df, id.vars = "gene_names", measure.vars = plotter$hash_vars$final_FDR_names)
	plotter$hash_vars$df_melted_FDR <- reshape2::melt(df, id.vars = "gene_names", measure.vars = plotter$hash_vars$final_pvalue_names)
	cat(plotter$prettify_div(plotter$static_ggplot_main(id = "df_melted_pval", header = NULL, row_names = NULL,
		resizable = TRUE, plotting_function = plot_pval_distr), preset = "magic"))
	cat(plotter$prettify_div(plotter$static_ggplot_main(id = "df_melted_FDR", header = NULL, row_names = NULL,
		resizable = TRUE, plotting_function = plot_pval_distr), preset = "magic"))
end.rcode-->

<!--begin.rcode pval_corr, echo = FALSE, warning = FALSE, eval = length(plotter$hash_vars$all_counts_for_plotting) > 1
	cat(plotter$create_title("FDR Correlations", id = "FDR_corr", hlevel = 3, indexable = FALSE))
	columns <<- c("combined_FDR", plotter$hash_vars$final_FDR_names)
	cat(plotter$prettify_div(plotter$static_plot_main(id = "df", header = NULL, row_names = NULL,
		custom_format = TRUE, plot_type = "autoplot", plotting_function = plot_FDR_corr), preset = "magic"))
	columns <<- plotter$hash_vars$final_pvalue_names
	cat(plotter$prettify_div(plotter$static_plot_main(id = "df", header = NULL, row_names = NULL,
		custom_format = TRUE, plot_type = "autoplot", plotting_function = plot_FDR_corr), preset = "magic"))
	columns <<- c("mean_logFCs", plotter$hash_vars$final_logFC_names)
	cat(plotter$prettify_div(plotter$static_plot_main(id = "df", header = NULL, row_names = NULL,
		custom_format = TRUE, plot_type = "autoplot", plotting_function = plot_FDR_corr), preset = "magic"))
end.rcode-->
