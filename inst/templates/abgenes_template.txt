
<!--begin.rcode setup
    p_adj_cutoff <- plotter$hash_vars$p_adj_cutoff
    z_score_cutoff <- plotter$hash_vars$z_score_cutoff
    top_N <- plotter$hash_vars$top_N
    plot_enc_dim_search <- function(ods) {
        OUTRIDER::plotEncDimSearch(ods) +
        ggplot2::labs(title = "Encoding dim search") +
        cowplot::theme_cowplot() +
        cowplot::background_grid() +
        ggplot2::scale_color_brewer(palette="Dark2")
    }
    plot_aberrant_per_sample <- function(ods) {
        OUTRIDER::plotAberrantPerSample(ods, main = "Aberrants per sample", 
                                        padjCutoff = p_adj_cutoff,
                                        zScoreCutoff = z_score_cutoff)
    }
    plot_expressed_genes <- function(ods) {
        OUTRIDER::plotExpressedGenes(ods) + cowplot::theme_cowplot() + cowplot::background_grid(major = "y") +
        ggplot2::geom_point(data = data.table::melt(plotter$hash_vars$expressed_genes, id.vars = c("Rank")),
                            ggplot2::aes(x = Rank, y = value, col = variable), show.legend = TRUE)
    }

    subset_columns <- function(df){
        return(df[, columns, drop = FALSE])
    }

    format_filter_df <- function(filter_df) {
        filter_levels <- levels(filter_df$filter)
        levels_length <- length(filter_levels)
        list <- vector(mode = "list", length = levels_length)
        for(i in seq(1, levels_length)) {
            list[[i]] <- filter_df[filter_df$filter == filter_levels[i], -3]
            names(list)[i] <- filter_levels[i]
            colnames(list[[i]])[2] <- filter_levels[i]
        }
        all_genes <- list$all$gene_ID
        for(name in names(list)[!names(list)=="all"]) {
            missing_genes <- all_genes[!all_genes %in% list[[name]]$gene_ID]
            if(length(missing_genes) > 0) {
                new_rows <- data.frame(gene_ID = missing_genes, median_counts = 0)
                colnames(new_rows)[2] <- name
                list[[name]] <- rbind(list[[name]], new_rows)
                list[[name]] <- list[[name]][order(list$all$gene_ID), ]
            }
        }
        res <- Reduce(function(df1, df2) merge(df1, df2, by = "gene_ID", all.x = TRUE), list)
        return(res)
    }

    format_volcano <- function(df) {
        res <- subset_columns(df)
        res$padjust <- -log10(res$padjust)
        return(res)
    }

    plot_expression_rank <- function(ods) {
        OUTRIDER::plotExpressionRank(ods, gene, basePlot = TRUE,
                      zScoreCutoff = cfg$aberrantExpression$zScoreCutoff,
                      padjCutoff = cfg$aberrantExpression$padjCutoff)
    }

    plot_expected_vs_observed <- function(ods) {
        OUTRIDER::plotExpectedVsObservedCounts(ods, gene, basePlot = TRUE)
    }

    format_aberrants_heatmap <- function(df) {
        df <- as.data.frame(df)
        samples <- unique(df$sampleID)
        res <- df[, colnames(df) != "zScore"]
        res <- reshape(res, idvar = "geneID", timevar = "sampleID", direction = "wide")
        res[is.na(res)] <- 0
        res <- t(res)
        colnames(res) <- res[1, ]
        res <- res[-1, ]
        # res <- apply(res, 2, function(x) as.numeric(x))
        rownames(res) <- samples
        return(res)
    }

    plotter$hash_vars$formatted_filter_df <- format_filter_df(plotter$hash_vars$filter_df)
end.rcode-->

<h1>Aberrant Expression Report</h1>
<h2>Boxplot of BCV Before and After Autoencoder</h2>
<!--begin.rcode biological_variation_coefficient
    cat(plotter$static_ggplot_main(id ="bcv_dt", header = NULL, text = "dynamic",
            plotting_function = function(ggplot_obj) {
            ggplot_obj + ggplot2::aes(x = when, y = BCV) +
                ggplot2::geom_boxplot() + ggplot2::theme_bw(base_size = 14) +
                ggplot2::labs(x = "Autoencoder correction",
                              y = "Biological coefficient \nof variation",
                              title = "Change in BCV")
        }))
end.rcode-->

<div id = "Counting_Summary">
<!--begin.rcode Count_rank_scatter2D
    cat(plotter$create_title("Counting Summary", hlevel = 1, indexable = TRUE,
        id = "Counting_Summary", t_id = "Counting_Summary"))
    cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
    columns <- c("count_rank", "read_count")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Read counts", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Reads counted", func = subset_columns)))
    columns <- c("frac_rank", "counted_frac")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Read Count Ratio", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Percent Reads Counted", func = subset_columns)))
    cat("</div>")
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">"')
    columns <- c("sf_rank", "size_factors")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Size Factors", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Size Factors", func = subset_columns)))
    columns <- c("read_count", "size_factors")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Size Factors vs. Read Counts",
             header = NULL, text = FALSE, row_names = FALSE,
             x_label = "Reads counted", y_label = "Size Factors", func = subset_columns)))
end.rcode-->
</div>
<div>

<div id = "OUTRIDER_Summary">
<!--begin.rcode OUTRIDER_Summary_static_plots
    cat(plotter$create_title("OUTRIDER Summary", hlevel = 1, indexable = TRUE,
        id = "OUTRIDER_Summary", t_id = "OUTRIDER_Summary"))
    cat("<div style=\"overflow: hidden; display: flex; flex-direction: row; justify-content: center\">")
    cat(plotter$static_plot_main("ods", custom_format = TRUE,
                                 plotting_function = plot_enc_dim_search))
    cat(plotter$static_plot_main("ods", custom_format = TRUE,
                                 plotting_function = plot_aberrant_per_sample))
end.rcode-->
</div>

<!--begin.rcode Corr_heatmaps
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">')
    cat(plotter$heatmap(list(id = "raw_sample_cors", title = "Correlation between samples before normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = FALSE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL"))))
    cat(plotter$heatmap(list(id = "norm_sample_cors", title = "Correlation between samples after normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = FALSE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL"))))
    cat('</div>')
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">')
    cat(plotter$heatmap(list(id = "raw_gene_cors", title = "logFC before normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                            "smpOverlays" = "EXTERNAL"))))
    cat(plotter$heatmap(list(id = "norm_gene_cors", title = "logFC after normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL"))))
    cat('</div>')
end.rcode-->

<h1>Count statistics</h1>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode Filter_barplots
    cat(plotter$density(
        list(id = "formatted_filter_df", header = NULL, text = FALSE, fillDensity = TRUE, median = TRUE,
             row_names = TRUE, x_label = "log10(mean counts per gene)", y_label = "Frequency", func = log10)))
end.rcode-->
<!--begin.rcode Expressed_genes_lineplot
    cat(plotter$line(
        list(id = "expressed_genes", title = "Statistics of expressed genes", header = NULL, text = "dynamic", row_names = TRUE,
             smp_attr = c(1), config = list('graphOrientation' = 'vertical'), x_label = "Sample rank", y_label = "NÂº of genes")))
end.rcode-->
</div>

<!--begin.rcode Expressed_genes_dt
    cat(plotter$table(
        "expressed_genes", header = NULL, row_names = NULL, table_rownames = FALSE, styled = "dt"))
end.rcode-->

<div id = "OUTRIDER_Overview">
<!--begin.rcode OUTRIDER_Overview_table
    cat(plotter$create_title("OUTRIDER Overview", hlevel = 1, indexable = TRUE,
        id = "OUTRIDER_Overview"))
    if(nrow(plotter$hash_vars$outrider_res_table) > 0) {
        cat(plotter$table(
        "outrider_res_table", header = NULL, row_names = NULL, table_rownames = FALSE, styled = "dt"))
        } else {
            cat("<p>No aberrants found in dataset. Perhaps thresholds are too strict, or dataset
                is too small. We suggest at least 30 samples.")
        }
    
end.rcode-->

<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode OUTRIDER_Overview_Samples, eval = nrow(plotter$hash_vars$outrider_res_table) > 0
    samples <- unique(plotter$hash_vars$outrider_res_table$sampleID)
    total_samples <- length(samples)
    columns <- c("padjust", "zScore")
    if(total_samples < top_N) {
        nsamples <- total_samples
    } else {
        nsamples <- top_N
    }
    top_samples <- samples[seq(1, nsamples)]
    table <- plotter$hash_vars$outrider_res_all
    sig_samples <- table[table$sampleID %in% top_samples, ]
    plotter$hash_vars$sig_samples <- sig_samples
    cat(plotter$scatter2D(
        list(id = "sig_samples", title = paste0("Top ", nsamples, " samples volcano plot"), header = NULL, text = "dynamic", 
             row_names = FALSE, x_label = "zScore", y_label = "p_padjust", var_attr = c(1, 3), func = format_volcano,
             xAxis = "zScore", yAxis = "padjust",
             config = list("decorations" = list("line" = list(list("color" = "rgba(205,0,0,0.5)", "width" = 2, "y" = -log10(p_adj_cutoff)),
                                                              list("color" = "rgba(205,0,0,0.5)", "width" = 2, "x" = z_score_cutoff),
                                                              list("color" = "rgba(205,0,0,0.5)", "width" = 2, "x" = -z_score_cutoff)))))
        ))
end.rcode-->

<!--begin.rcode OUTRIDER_Overview_Genes, eval = nrow(plotter$hash_vars$outrider_res_table)
    genes <- unique(plotter$hash_vars$outrider_res_table$geneID)
    total_genes <- length(genes)
    columns <- c("padjust", "zScore")
    if(total_genes < top_N) {
        ngenes <- total_genes
    } else {
        ngenes <- top_N
    }
    top_genes <- genes[seq(1, ngenes)]
    table <- plotter$hash_vars$outrider_res_all
    sig_genes <- table[table$geneID %in% top_genes, ]
    plotter$hash_vars$sig_genes <- sig_genes
    cat(plotter$scatter2D(
        list(id = "sig_genes", title = paste0("Top ", ngenes, " genes volcano plot"), header = NULL, text = "dynamic", 
             row_names = FALSE, x_label = "zScore", y_label = "p_padjust", var_attr = c(1, 3), func = format_volcano,
             xAxis = "zScore", yAxis = "padjust",
             config = list("decorations" = list("line" = list(list("color" = "rgba(205,0,0,0.5)", "width" = 2, "y" = -log10(p_adj_cutoff)),
                                                              list("color" = "rgba(205,0,0,0.5)", "width" = 2, "x" = z_score_cutoff),
                                                              list("color" = "rgba(205,0,0,0.5)", "width" = 2, "x" = -z_score_cutoff))),
                      list("hoverTemplate" = "Sample: {sampleID} <br>
                                              HGNC symbol: {hgncsymbol} <br>
                                              pP-value (adjusted): {pval} <br>
                                              Z-score: {Zscore}"))
        )))
end.rcode-->
</div>
</div>

<!--begin.rcode AE_diagnostics, eval = !is.null(plotter$hash_vars$processed) & is.null(plotter$hash_vars$imported)
    cat(plotter$create_title("Diagnostics plots", hlevel = 1, indexable = TRUE,
                              id = "AE_diagnostics", t_id = AE_diagnostics))
    cat("<div id=AE_diagnostics>")
end.rcode-->
<!--begin.rcode AE_local_heatmaps, eval = !is.null(plotter$hash_vars$formatted$processed)
    cat("<h1>Aberrant genes detected in locally processed samples</h1>")
    plotter$hash_vars$local <- plotter$hash_vars$formatted$processed
    cat(plotter$heatmap(list(id = "local", title = "Aberrant expression heatmap across samples", header = NULL,
                             text = "dynamic", row_names = NULL, transpose = FALSE,
                             xAxis = "sampleID", yAxis = "geneID", func = format_aberrants_heatmap)))
end.rcode-->
<!--begin.rcode AE_external_heatmaps, eval = !is.null(plotter$hash_vars$formatted$imported)
    cat("<h1>Aberrant genes detected in imported samples (quality control)</h1>")
    plotter$hash_vars$external <- plotter$hash_vars$formatted$imported
    cat(plotter$heatmap(list(id = "external", title = "Aberrant expression heatmap across samples", header = NULL,
                             text = "dynamic", row_names = NULL, transpose = FALSE,
                             xAxis = "sampleID", yAxis = "geneID", func = format_aberrants_heatmap)))
end.rcode-->
</div>
