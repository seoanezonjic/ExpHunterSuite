
<!--begin.rcode setup
    p_adj_cutoff <- plotter$hash_vars$p_adj_cutoff
    z_score_cutoff <- plotter$hash_vars$z_score_cutoff
    size_factors <- plotter$hash_vars$size_factors
    local_size_factors <- plotter$hash_vars$local_size_factors
    has_external <- any(as.logical(SummarizedExperiment::colData(
                                   plotter$hash_vars$ods)$isExternal))
    local_columns <- SummarizedExperiment::colData(plotter$hash_vars$ods)$EXTERNAL == "no"
    plotter$hash_vars$cnts_mtx_local <- plotter$hash_vars$cnts_mtx[, local_columns]
    plot_enc_dim_search <- function(ods) {
        OUTRIDER::plotEncDimSearch(ods) +
              ggplot2::labs(title = "Encoding dim search") +
              cowplot::theme_cowplot() +
              cowplot::background_grid() +
              ggplot2::scale_color_brewer(palette="Dark2")
    }
    plot_aberrant_per_sample <- function(ods) {
        OUTRIDER::plotAberrantPerSample(ods, main = "Aberrants per sample", 
                                        padjCutoff = p_adj_cutoff,
                                        zScoreCutoff = z_score_cutoff)
    }
    subset_df <- function(df){
        return(df[, columns, drop = FALSE])
    }
end.rcode-->

<h1>Aberrantly Expressed Genes Report</h1>
<h2>Boxplot of BCV Before and After Autoencoder</h2>
<!--begin.rcode biological_variation_coefficient
    cat(plotter$static_ggplot_main(id ="bcv_dt", header = NULL, text = "dynamic",
            plotting_function = function(ggplot_obj) {
            ggplot_obj + ggplot2::aes(x = when, y = BCV) +
                ggplot2::geom_boxplot() + ggplot2::theme_bw(base_size = 14) +
                ggplot2::labs(x = "Autoencoder correction",
                              y = "Biological coefficient \nof variation",
                              title = "Change in BCV")
        }))
end.rcode-->

<h2>OUTRIDER Summary</h2>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode OUTRIDER_Summary_static_plots
    cat(plotter$static_plot_main("ods", custom_format = TRUE,
                                 plotting_function = plot_enc_dim_search))
    cat(plotter$static_plot_main("ods", custom_format = TRUE,
                                 plotting_function = plot_aberrant_per_sample))
end.rcode-->
</div>

<!--begin.rcode OUTRIDER_Summary_heatmaps
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">')
    cat(plotter$heatmap(list(id = "raw_sample_cors", title = "Correlation between samples before normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = FALSE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL",
                                           samplesClustered = TRUE,
                                           variablesClustered = TRUE,
                                           clusteringDistance = "euclidianDistance"))))
    cat(plotter$heatmap(list(id = "norm_sample_cors", title = "Correlation between samples after normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = FALSE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL",
                                           samplesClustered = TRUE,
                                           variablesClustered = TRUE,
                                           clusteringDistance = "euclidianDistance"))))
    cat('</div>')
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">')
    cat(plotter$heatmap(list(id = "raw_gene_cors", title = "logFC before normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                            "smpOverlays" = "EXTERNAL",
                                            samplesClustered = TRUE,
                                            variablesClustered = TRUE,
                                            clusteringDistance = "euclidianDistance"))))
    cat(plotter$heatmap(list(id = "norm_gene_cors", title = "logFC after normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL",
                                           samplesClustered = TRUE,
                                           variablesClustered = TRUE,
                                           clusteringDistance = "euclidianDistance"))))
    cat('</div>')
end.rcode-->

<h2>Counting Summary</h2>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode Counting_Summary_plots
    columns <- c("count_rank", "read_count")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Read counts", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Reads counted", func = subset_df)))
    columns <- c("frac_rank", "counted_frac")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Read Count Ratio", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Percent Reads Counted", func = subset_df)))
    cat("</div>")
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">"')
    columns <- c("sf_rank", "size_factors")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Size Factors", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Size Factors", func = subset_df)))
    columns <- c("read_count", "size_factors")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Size Factors vs. Read Counts",
             header = NULL, text = FALSE, row_names = FALSE,
             x_label = "Reads counted", y_label = "Size Factors", func = subset_df)))

    # if(has_external){
    #   filter_mtx <- list(
    #     local = cnts_mtx_local,
    #     all = cnts_mtx,
    #     `passed FPKM` = cnts_mtx[SummarizedExperiment::rowData(ods)$passedFilter,],
    #     `min 1 read` = cnts_mtx[MatrixGenerics::rowQuantiles(cnts_mtx, probs = 0.95) > 1, ],
    #     `min 10 reads` = cnts_mtx[MatrixGenerics::rowQuantiles(cnts_mtx, probs = 0.95) > 10, ]
    #   )
    #   filter_dt <- lapply(names(filter_mtx), function(filter_name) {
    #     mtx <- filter_mtx[[filter_name]]
    #     data.table::data.table(gene_ID = rownames(mtx), median_counts = rowMeans(mtx), filter = filter_name)
    #   }) %>% rbindlist
    #   filter_dt[, filter := factor(filter, levels = c('local', 'all', 'passed FPKM', 'min 1 read', 'min 10 reads'))]
    # } else {
    #   filter_mtx <- list(
    #     all = cnts_mtx,
    #     `passed FPKM` = cnts_mtx[SummarizedExperiment::rowData(ods)$passedFilter,],
    #     `min 1 read` = cnts_mtx[MatrixGenerics::rowQuantiles(cnts_mtx, probs = 0.95) > 1, ],
    #     `min 10 reads` = cnts_mtx[MatrixGenerics::rowQuantiles(cnts_mtx, probs = 0.95) > 10, ]
    #   )
    #   filter_dt <- lapply(names(filter_mtx), function(filter_name) {
    #     mtx <- filter_mtx[[filter_name]]
    #     data.table::data.table(gene_ID = rownames(mtx), median_counts = rowMeans(mtx), filter = filter_name)
    #   }) |> rbindlist()
    #   filter_dt[, filter := factor(filter, levels = c('all', 'passed FPKM', 'min 1 read', 'min 10 reads'))]
    # }

    # binwidth <- .2
    # p_hist <- ggplot2::ggplot(filter_dt, ggplot2::aes(x = median_counts, fill = filter)) +
    # ggplot2::geom_histogram(binwidth = binwidth) +
    # ggplot2::scale_x_log10() +
    # ggplot2::facet_wrap(.~filter) +
    # ggplot2::labs(x = "Mean counts per gene", y = "Frequency", title = 'Mean Count Distribution') +
    # ggplot2::guides(col = ggplot2::guide_legend(title = NULL)) +
    # ggplot2::scale_fill_brewer(palette = "Paired") +
    # cowplot::theme_cowplot() +
    # ggplot2::theme(legend.position = "none")

    # p_dens <- ggplot2::ggplot(filter_dt, ggplot2::aes(x = median_counts, col = filter)) +
    # ggplot2::geom_density(ggplot2::aes(y=binwidth * ..count..), size = 1.2) +
    # ggplot2::scale_x_log10() +
    # ggplot2::labs(x = "Mean counts per gene", y = "Frequency") +
    # ggplot2::guides(col = ggplot2::guide_legend(title = NULL)) +
    # ggplot2::scale_color_brewer(palette = "Paired") +
    # cowplot::theme_cowplot() +
    # ggplot2::theme(legend.position = "top",
    #       legend.justification="center",
    #       legend.background = ggplot2::element_rect(color = NA))

    # cowplot::plot_grid(p_hist, p_dens)

    # exp_genes_cols <- c(Rank = "expressedGenesRank",`Expressed\ngenes` = "expressedGenes", 
    #                   `Union of\nexpressed genes` = "unionExpressedGenes", 
    #                   `Intersection of\nexpressed genes` = "intersectionExpressedGenes", 
    #                   `Genes passed\nfiltering` = "passedFilterGenes")

    # expressed_genes <- data.table::as.data.table(SummarizedExperiment::colData(ods)[, exp_genes_cols])
    # colnames(expressed_genes) <- names(exp_genes_cols)

    # #+ expressedGenes, fig.height=6, fig.width=8
    # OUTRIDER::plotExpressedGenes(ods) + 
    # cowplot::theme_cowplot() +
    # cowplot::background_grid(major = "y") +
    # ggplot2::geom_point(data = data.table::melt(expressed_genes, id.vars = c("Rank")),
    #            ggplot2::aes(x = Rank, y = value, col = variable), show.legend = TRUE)

    # if(TRUE){
    #   DT::datatable(expressed_genes[order(Rank)], rownames = F)
    # } else{
    #   DT::datatable(expressed_genes[order(Rank), -"Is External"], rownames = F)
    # }
end.rcode-->
</div>

# <!--begin.rcode AE_heatmaps, eval=!is.null(plotter$hash_vars$processed_AE_results.tsv)
#     groups <- "processed"
#     if(!is.null(plotter$hash_vars$imported_AE_results.tsv)) {
#         groups <- c(groups, "imported")
#     }
#     for (group in groups) {
#         cat(paste0("<h2>Aberrants detected in ", group," samples</h2>"))
#         cat(plotter$static_ggplot_main(paste0(group, "_AE_results.tsv"), header = TRUE, text = "dynamic",
#             plotting_function = function(ggplot_obj) {
#                 ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
#                 ggplot2::geom_tile(show.legend = TRUE) +
#                 ggplot2::theme_minimal() +
#                 ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
#                 ggplot2::theme(
#                     axis.text.x = ggplot2::element_text(
#                                     angle = 25, face = "bold", hjust = 1),
#                     axis.text.y = ggplot2::element_text(face = "bold")
#                     ) +
#                 ggplot2::scale_fill_gradient2(
#                     low = "#0000D5", mid= "#FFFFFF", high = "#D50000",
#                     na.value = "grey50", guide = "colourbar",
#                     aesthetics = "fill")
#             }))
#     }
# end.rcode-->

# <!--begin.rcode No_AE_heatmaps, eval=is.null(plotter$hash_vars$processed_AE_results.tsv)
#     cat("<h2>No aberrantly expressed genes found in dataset</h2>")
# end.rcode-->

# <!--begin.rcode AS_heatmaps, eval=!is.null(plotter$hash_vars$processed_AS_psi3_results.tsv)
#     cat("<h1>Aberrant Splicing Plots</h1>")
#         groups <- "processed"
#         metrics <- c("psi3", "psi5", "theta")
#     if(!is.null(plotter$hash_vars$imported_AS_psi3_results.tsv)) {
#         groups <- c(groups, "imported")
#     }
#     cat("<ul>\n
#             <li> Only samples with at least one aberrantly spliced gene are shown </li>\n
#             <li> Only genes aberrantly spliced in at least one sample are shown </li>\n
#             <li> Metrics show deviation from mean splicing metric </li>\n
#             <li> Psi3 => canonic acceptor rate </li>\n
#             <li> Psi5 => canonic donor rate </li>\n
#             <li> Theta => splicing efficiency </li>\n
#             <li> Number inside field represents number of splicing events </li>\n
#         </ul>")
#     for (group in groups) {
#         cat(paste0("<h2>Aberrants detected in ", group," samples</h2>"))
#         for (metric in metrics) {
#             cat(paste0("<h2>Aberrant ", metric," events</h2>"))
#             cat(plotter$static_ggplot_main(paste0(group, "_AS_", metric, "_results.tsv"), header = TRUE, text = "dynamic", resizable = TRUE,
#             plotting_function = function(ggplot_obj) {
#                     ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
#                     ggplot2::geom_tile(show.legend = TRUE) +
#                     ggplot2::geom_text(mapping = ggplot2::aes(label=spliceSites), size = 2) +
#                     ggplot2::theme_minimal() +
#                     ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
#                     ggplot2::theme(text = ggplot2::element_text(size=8)) +
#                     ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 25, face = "bold", hjust = 1), axis.text.y = ggplot2::element_text(face = "bold")) +
#                     ggplot2::scale_fill_gradient2(low = "#0000D5", mid= "#FFFFFF", high = "#D50000", na.value = "grey50", guide = "colourbar", aesthetics = "fill")
#                 }))
#             }
#         }
# end.rcode-->

# <!--begin.rcode MAE_heatmaps, eval=!is.null(plotter$hash_vars$MAE_results.tsv)
#     cat("<h1>Monoallelic expression plots</h1>\n
#         <ul>\n
#             <li> Technical test. Performed on RNA variant-called VCFs, NOT the intended way to use this module. </li>\n
#         </ul>")
#     cat(plotter$static_ggplot_main("MAE_results.tsv", header = TRUE, text = "dynamic", resizable = TRUE,
#         plotting_function = function(ggplot_obj) {
#             ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
#             ggplot2::geom_tile(show.legend = TRUE) +
#             ggplot2::theme_minimal() +
#             ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
#             ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 25, face = "bold", hjust = 1), axis.text.y = ggplot2::element_text(face = "bold")) +
#             ggplot2::scale_fill_gradient2(low = "#0000D5", mid= "#FFFFFF", high = "#D50000", na.value = "grey50", guide = "colourbar", aesthetics = "fill")
#     }))
# end.rcode-->


# <br><br><br>
