
<!--begin.rcode setup
    p_adj_cutoff <- plotter$hash_vars$p_adj_cutoff
    z_score_cutoff <- plotter$hash_vars$z_score_cutoff
    plot_enc_dim_search <- function(ods) {
        OUTRIDER::plotEncDimSearch(ods) +
              ggplot2::labs(title = "Encoding dim search") +
              cowplot::theme_cowplot() +
              cowplot::background_grid() +
              ggplot2::scale_color_brewer(palette="Dark2")
    }
    plot_aberrant_per_sample <- function(ods) {
        OUTRIDER::plotAberrantPerSample(ods, main = "Aberrants per sample", 
                                        padjCutoff = p_adj_cutoff,
                                        zScoreCutoff = z_score_cutoff)
    }
    plot_expressed_genes <- function(ods) {
        OUTRIDER::plotExpressedGenes(ods) + cowplot::theme_cowplot() + cowplot::background_grid(major = "y") +
        ggplot2::geom_point(data = data.table::melt(plotter$hash_vars$expressed_genes, id.vars = c("Rank")),
                            ggplot2::aes(x = Rank, y = value, col = variable), show.legend = TRUE)
    }
    subset_columns <- function(df){
        return(df[, columns, drop = FALSE])
    }

    format_filter_df <- function(filter_df) {
        filter_levels <- levels(filter_df$filter)
        levels_length <- length(filter_levels)
        list <- vector(mode = "list", length = levels_length)
        for(i in seq(1, levels_length)) {
            list[[i]] <- filter_df[filter_df$filter == filter_levels[i], -3]
            names(list)[i] <- filter_levels[i]
            colnames(list[[i]])[2] <- filter_levels[i]
        }
        all_genes <- list$all$gene_ID
        for(name in names(list)[!names(list)=="all"]) {
            missing_genes <- all_genes[!all_genes %in% list[[name]]$gene_ID]
            if(length(missing_genes) > 0) {
                new_rows <- data.frame(gene_ID = missing_genes, median_counts = 0)
                colnames(new_rows)[2] <- name
                list[[name]] <- rbind(list[[name]], new_rows)
                list[[name]] <- list[[name]][order(list$all$gene_ID), ]
            }
        }
        res <- Reduce(function(df1, df2) merge(df1, df2, by = "gene_ID", all.x = TRUE), list)
        return(res)
    }

    rownames_as_col <- function(df) {
        new_col <- data.frame(Sample = rownames(df))
        new_df <- cbind(new_col, df)
        rownames(new_df) <- NULL
        return(new_df)
    }

    plotter$hash_vars$formatted_filter_df <- format_filter_df(plotter$hash_vars$filter_df)
end.rcode-->

<h1>Aberrant Expression Report</h1>
<h2>Boxplot of BCV Before and After Autoencoder</h2>
<!--begin.rcode biological_variation_coefficient
    cat(plotter$static_ggplot_main(id ="bcv_dt", header = NULL, text = "dynamic",
            plotting_function = function(ggplot_obj) {
            ggplot_obj + ggplot2::aes(x = when, y = BCV) +
                ggplot2::geom_boxplot() + ggplot2::theme_bw(base_size = 14) +
                ggplot2::labs(x = "Autoencoder correction",
                              y = "Biological coefficient \nof variation",
                              title = "Change in BCV")
        }))
end.rcode-->

<h2>OUTRIDER Summary</h2>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode OUTRIDER_Summary_static_plots
    cat(plotter$static_plot_main("ods", custom_format = TRUE,
                                 plotting_function = plot_enc_dim_search))
    cat(plotter$static_plot_main("ods", custom_format = TRUE,
                                 plotting_function = plot_aberrant_per_sample))
end.rcode-->
</div>

<!--begin.rcode Corr_heatmaps
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">')
    cat(plotter$heatmap(list(id = "raw_sample_cors", title = "Correlation between samples before normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = FALSE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL",
                                           samplesClustered = TRUE,
                                           variablesClustered = TRUE,
                                           clusteringDistance = "euclidianDistance"))))
    cat(plotter$heatmap(list(id = "norm_sample_cors", title = "Correlation between samples after normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = FALSE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL",
                                           samplesClustered = TRUE,
                                           variablesClustered = TRUE,
                                           clusteringDistance = "euclidianDistance"))))
    cat('</div>')
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">')
    cat(plotter$heatmap(list(id = "raw_gene_cors", title = "logFC before normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                            "smpOverlays" = "EXTERNAL",
                                            samplesClustered = TRUE,
                                            variablesClustered = TRUE,
                                            clusteringDistance = "euclidianDistance"))))
    cat(plotter$heatmap(list(id = "norm_gene_cors", title = "logFC after normalisation",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE, var_attr = 1, smp_attr = 1,
                             config = list("varOverlays" = "nClust",
                                           "smpOverlays" = "EXTERNAL",
                                           samplesClustered = TRUE,
                                           variablesClustered = TRUE,
                                           clusteringDistance = "euclidianDistance"))))
    cat('</div>')
end.rcode-->

<h2>Counting Summary</h2>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode Count_rank_scatter2D
    columns <- c("count_rank", "read_count")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Read counts", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Reads counted", func = subset_columns)))
    columns <- c("frac_rank", "counted_frac")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Read Count Ratio", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Percent Reads Counted", func = subset_columns)))
    cat("</div>")
    cat('<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">"')
    columns <- c("sf_rank", "size_factors")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Size Factors", header = NULL,
             text = FALSE, row_names = FALSE, x_label = "Sample rank",
             y_label = "Size Factors", func = subset_columns)))
    columns <- c("read_count", "size_factors")
    cat(plotter$scatter2D(
        list(id = "coverage_df", title = "Size Factors vs. Read Counts",
             header = NULL, text = FALSE, row_names = FALSE,
             x_label = "Reads counted", y_label = "Size Factors", func = subset_columns)))
end.rcode-->
</div>

<h1>Count statistics</h1>
<div style="overflow: hidden; display: flex; flex-direction: row; justify-content: center">
<!--begin.rcode Filter_barplots
    cat(plotter$density(
        list(id = "formatted_filter_df", header = NULL, text = FALSE, fillDensity = TRUE, median = TRUE,
             row_names = TRUE, x_label = "log10(mean counts per gene)", y_label = "Frequency", func = log10)))
end.rcode-->
<!--begin.rcode Expressed_genes_lineplot
    cat(plotter$line(
        list(id = "expressed_genes", title = "Statistics of expressed genes", header = NULL, text = "dynamic", row_names = TRUE,
             smp_attr = c(1), config = list('graphOrientation' = 'vertical'), x_label = "Sample rank", y_label = "NÂº of genes")))
end.rcode-->
</div>

<!--begin.rcode Expressed_genes_dt
    cat(plotter$table(
        "expressed_genes", header = NULL, row_names = TRUE, table_rownames = FALSE, smp_attr = c(1), var_attr = c(1),
        styled = "dt", func = rownames_as_col))
end.rcode-->

# <!--begin.rcode AE_heatmaps, eval=!is.null(plotter$hash_vars$processed_AE_results.tsv)
#     groups <- "processed"
#     if(!is.null(plotter$hash_vars$imported_AE_results.tsv)) {
#         groups <- c(groups, "imported")
#     }
#     for (group in groups) {
#         cat(paste0("<h2>Aberrants detected in ", group," samples</h2>"))
#         cat(plotter$static_ggplot_main(paste0(group, "_AE_results.tsv"), header = TRUE, text = "dynamic",
#             plotting_function = function(ggplot_obj) {
#                 ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
#                 ggplot2::geom_tile(show.legend = TRUE) +
#                 ggplot2::theme_minimal() +
#                 ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
#                 ggplot2::theme(
#                     axis.text.x = ggplot2::element_text(
#                                     angle = 25, face = "bold", hjust = 1),
#                     axis.text.y = ggplot2::element_text(face = "bold")
#                     ) +
#                 ggplot2::scale_fill_gradient2(
#                     low = "#0000D5", mid= "#FFFFFF", high = "#D50000",
#                     na.value = "grey50", guide = "colourbar",
#                     aesthetics = "fill")
#             }))
#     }
# end.rcode-->

# <!--begin.rcode No_AE_heatmaps, eval=is.null(plotter$hash_vars$processed_AE_results.tsv)
#     cat("<h2>No aberrantly expressed genes found in dataset</h2>")
# end.rcode-->

# <!--begin.rcode AS_heatmaps, eval=!is.null(plotter$hash_vars$processed_AS_psi3_results.tsv)
#     cat("<h1>Aberrant Splicing Plots</h1>")
#         groups <- "processed"
#         metrics <- c("psi3", "psi5", "theta")
#     if(!is.null(plotter$hash_vars$imported_AS_psi3_results.tsv)) {
#         groups <- c(groups, "imported")
#     }
#     cat("<ul>\n
#             <li> Only samples with at least one aberrantly spliced gene are shown </li>\n
#             <li> Only genes aberrantly spliced in at least one sample are shown </li>\n
#             <li> Metrics show deviation from mean splicing metric </li>\n
#             <li> Psi3 => canonic acceptor rate </li>\n
#             <li> Psi5 => canonic donor rate </li>\n
#             <li> Theta => splicing efficiency </li>\n
#             <li> Number inside field represents number of splicing events </li>\n
#         </ul>")
#     for (group in groups) {
#         cat(paste0("<h2>Aberrants detected in ", group," samples</h2>"))
#         for (metric in metrics) {
#             cat(paste0("<h2>Aberrant ", metric," events</h2>"))
#             cat(plotter$static_ggplot_main(paste0(group, "_AS_", metric, "_results.tsv"), header = TRUE, text = "dynamic", resizable = TRUE,
#             plotting_function = function(ggplot_obj) {
#                     ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
#                     ggplot2::geom_tile(show.legend = TRUE) +
#                     ggplot2::geom_text(mapping = ggplot2::aes(label=spliceSites), size = 2) +
#                     ggplot2::theme_minimal() +
#                     ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
#                     ggplot2::theme(text = ggplot2::element_text(size=8)) +
#                     ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 25, face = "bold", hjust = 1), axis.text.y = ggplot2::element_text(face = "bold")) +
#                     ggplot2::scale_fill_gradient2(low = "#0000D5", mid= "#FFFFFF", high = "#D50000", na.value = "grey50", guide = "colourbar", aesthetics = "fill")
#                 }))
#             }
#         }
# end.rcode-->

# <!--begin.rcode MAE_heatmaps, eval=!is.null(plotter$hash_vars$MAE_results.tsv)
#     cat("<h1>Monoallelic expression plots</h1>\n
#         <ul>\n
#             <li> Technical test. Performed on RNA variant-called VCFs, NOT the intended way to use this module. </li>\n
#         </ul>")
#     cat(plotter$static_ggplot_main("MAE_results.tsv", header = TRUE, text = "dynamic", resizable = TRUE,
#         plotting_function = function(ggplot_obj) {
#             ggplot_obj + ggplot2::aes(x = sampleID, y = geneID, fill = p_padjust) +
#             ggplot2::geom_tile(show.legend = TRUE) +
#             ggplot2::theme_minimal() +
#             ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
#             ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 25, face = "bold", hjust = 1), axis.text.y = ggplot2::element_text(face = "bold")) +
#             ggplot2::scale_fill_gradient2(low = "#0000D5", mid= "#FFFFFF", high = "#D50000", na.value = "grey50", guide = "colourbar", aesthetics = "fill")
#     }))
# end.rcode-->


# <br><br><br>
