
<!--begin.rcode setup
    colGEX <- c("grey85", "#FEE5D9", "#FCBBA1", "#FC9272", "#FB6A4A", "#EF3B2C", "#CB181D", "#99000D")
    int_columns <- plotter$hash_vars$int_columns
    target_genes <- plotter$hash_vars$target_genes
    markers <- plotter$hash_vars$markers
    DEG_list <- plotter$hash_vars$DEG_list
    
    Custom_DotPlot <- function(seu) {
        if(!any(features %in% rownames(SeuratObject::GetAssayData(plotter$hash_vars$seu)))) {
            return("<p>Object contains none of the specified features</p>")
        }
        Seurat::Idents(seu) <- seu@meta.data$cell_type
        scCustomize::DotPlot_scCustom(seu, unique(features), flip_axes = TRUE, 
                                      colors_use = colGEX, x_lab_rotate = TRUE) +
        ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90))
    }

    Custom_DimPlot <- function(seu) {
        ident <- ifelse("cell_type" %in% colnames(seu@meta.data),
                        yes = "cell_type", no = "seurat_clusters")
        Seurat::Idents(seu) <- seu@meta.data[[ident]]
        res <- Seurat::DimPlot(seu, reduction = reduction, label = label, repel = TRUE, split.by = split.by,
                        group.by = group.by) 
        if(label) {
          res <- res + ggplot2::theme(legend.position="none")
        }
        return(res)
    }

    top_table <- function(df) {
        top <- 10
        if(nrow(df) < 10) {
            top <- nrow(df)
        }
        res <- df[order(df$avg_log2FC, decreasing = TRUE), ][1:top, ]
        return(res)
    }

    subset_table <- function(df) {
        res <- df[df$gene == features, ]
        return(res)
    }

    Top_vlnplot <- function(seu) {
        scCustomize::Stacked_VlnPlot(seu, pt.size = 0, x_lab_rotate = 90,
                                     features = sort(features))
    }

    Custom_ftplot <- function(seu) {
        Seurat::Idents(seu) <- seu@meta.data$cell_type
        scCustomize::FeaturePlot_scCustom(seu, reduction = "umap", pt.size = 0.1, num_columns = 1,
                                          features = feature, na_cutoff = NA, label = TRUE) +
        ggplot2::scale_color_gradientn(colors = colGEX) + ggplot2::coord_fixed()
    }

    DEGs_volcano <- function(input_DEGs) {
        EnhancedVolcano::EnhancedVolcano(input_DEGs,
                                         lab = rownames(input_DEGs),
                                         x = 'avg_log2FC', y = 'p_val_adj',
                                         ylim = -0.5,
                                         title = level,
                                         pCutoff = 0.05, FCcutoff = 0.1)
    }

    get_top_DEGs <- function(input_DEGs) {
        res <- input_DEGs[input_DEGs$p_val_adj < 0.05 & abs(input_DEGs$avg_log2FC > 1), ]
        res <- res[, c("gene", "p_val", "p_val_adj", "avg_log2FC", "pct.1", "pct.2")]
        return(res)
    }
    
end.rcode-->

<h1><strong>Single Cell RNA-Seq Integration analysis</strong></h1>

<!--begin.rcode intro
cat(plotter$create_title("Quality Control", "QC", hlevel = 1, indexable = TRUE, clickable = FALSE,
                          t_id = "QC", clickable_text = ""))
end.rcode-->

<!--begin.rcode sample_qc_pct
    cat(plotter$create_title("Top genes expression heatmap", "sample QC", hlevel = 2, indexable = FALSE,
                              clickable = FALSE, t_id = "sample_qc_pct", clickable_text = ""))
    cat(plotter$prettify_div(plotter$heatmap(list(id = "sample_qc_pct",  title = "Top gene expression across
                                                  samples", header = NULL, text = FALSE, row_names = NULL,
                                                  transpose = TRUE)), preset = "magic"))
end.rcode-->

<!--begin.rcode cell_markers, eval = !is.null(plotter$hash_vars$cell_annotation)
    elements <- unique(plotter$hash_vars$cell_annotation$type)
    collapse_list <- vector(mode = "character", length = length(elements) + 2)
    names(collapse_list) <- c("paragraph", "subtitle", elements)
    collapse_list["paragraph"] <- paste0("<p>Seurat clusters are defined mathematically. Unless a manual cluster annotation file is provided,\n",
                                         "our workflow finds cluster markers and compares them to the cell types annotation file. It then\n",
                                         "analyses matches and determines the most likely cell type for the cluster. These markers are\n",
                                         "plotted in the following graphs.</p>")
    collapse_list["subtitle"] <- "<h2>Expression of cell type markers across experiment clusters</h2>"
    for(element_name in elements) {
        features <- plotter$hash_vars$cell_annotation[plotter$hash_vars$cell_annotation$type == element_name, ]$marker
        collapse_list[element_name] <- paste(paste0("<h2>", element_name, " markers</h2>"),
                                       plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                                                 plotting_function = Custom_DotPlot), preset = "magic"), sep = "\n")
    }
    markers_html <- paste0(paste(collapse_list, collapse = "\n"), "\n")
    cat(plotter$create_title("Markers distribution", "markers", hlevel = 2, indexable = FALSE, clickable = TRUE,
                             t_id = "markers_distribution", clickable_text = ""))
    cat(plotter$create_collapsable_container(id = "markers_distribution", html_code = markers_html))
end.rcode-->

<!--begin.rcode top_markers
    slot <- ifelse(is.null(plotter$hash_vars$markers$cell_type), no = "cell_type", yes = "cluster")
    types <- as.character(unique(plotter$hash_vars$markers[[slot]]))
    collapse_list <- vector(mode = "character", length = length(types))
    for(type in seq(types)) {
        plotter$hash_vars$type_markers <- plotter$hash_vars$markers[plotter$hash_vars$markers[slot] == types[type], ]
        collapse_list[type] <- paste(paste0("<h2>Top markers for identity ", types[type]),
                                            plotter$prettify_div(plotter$table(list(id = "type_markers", header = NULL,
                                                    row_names = NULL, table_rownames = FALSE, styled = "dt",
                                                    func = top_table))), sep = "\n")
    }
    top_markers_html <- paste0(paste(collapse_list, collapse = "\n"), "\n")
    if(is.null(plotter$hash_vars$seu@meta.data$cell_type)) {
        title_group <- "cluster"
    } else {
        title_group <- "cell type"
    }
    cat(plotter$create_title(paste0("Top 10 markers by ", title_group), "top markers", hlevel = 2, indexable = FALSE, clickable = TRUE,
                             t_id = "top_markers", clickable_text = ""))
    paragraph <- paste0("<p>These are the markers that best define the identity group. They might ",
                        "not match cell type markers.</p>")
    cat(plotter$create_collapsable_container(id = "top_markers",
                                             html_code = paste(paragraph, top_markers_html,  sep = "\n")))
end.rcode-->

<!--begin.rcode Complete_UMAP
    cat(plotter$create_title("Dimensionality reduction", "dimreds", hlevel = 1, indexable = TRUE, clickable = FALSE,
                              t_id = "dimreds", clickable_text = ""))
    cat(plotter$create_title("UMAP", "full_umap", hlevel = 2, indexable = TRUE, clickable = FALSE,
                              t_id = "full_umap", clickable_text = ""))
    reduction <- "umap"
    label <- TRUE
    group.by <- split.by <- NULL
    cat(plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE, plotting_function = Custom_DimPlot),
                             preset = "magic"))
end.rcode-->

<!--begin.rcode umap_splits, eval = plotter$hash_vars$integrate
    label <- FALSE
    for(condition in int_columns) {
        split.by <- condition
        html_code <- plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                          plotting_function = Custom_DimPlot), preset = "magic")
        cat(plotter$create_title(paste0("Split by ", condition), paste0(condition, " split"), hlevel = 2,
                                 indexable = FALSE, clickable = TRUE, t_id = paste0(condition, "_split"),
                                 clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(condition, "_split"), html_code = html_code))
    }
end.rcode-->

<!--begin.rcode umap_groups, eval = plotter$hash_vars$integrate
    label <- FALSE
    for(condition in int_columns) {
        split.by <- NULL
        group.by <- condition
        html_code <- plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                          plotting_function = Custom_DimPlot), preset = "magic")
        cat(plotter$create_title(paste0("Grouped by ", condition), paste0(condition, " grouped"), hlevel = 2,
                                 indexable = FALSE, clickable = TRUE, t_id = paste0(condition, "_grouped"),
                                 clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(condition, "_grouped"), html_code = html_code))
    }
end.rcode-->

<!--begin.rcode cluster_pct
    cat(plotter$create_title("Cluster composition of samples", "cluster distribution", hlevel = 2,
                              indexable = FALSE, clickable = FALSE, t_id = "cluster_distribution",
                              clickable_text = ""))
    cat("<p>This plot represents the cluster composition of each sample.</p>")
    cat(plotter$prettify_div(plotter$heatmap(list(id = "clusters_pct", title = "Cell type percentage by sample",
                                             header = NULL, text = FALSE, row_names = NULL,
                                             transpose = TRUE)), preset = "magic"))
end.rcode-->

<!--begin.rcode DEG_analysis, eval = length(DEG_list) > 0
    cat(plotter$create_title("Differential expression analysis", "DEG", hlevel = 1, indexable = TRUE,
                              clickable = FALSE, t_id = "DEG", clickable_text = ""))
    for(i in seq(length(DEG_list))) {
        condition <- names(DEG_list)[i]
        condition_DEGs <- DEG_list[[condition]]
        cat(plotter$create_title(paste0("DEGs by ", condition), paste0(condition, "_DEGs"), hlevel = 2,
                             indexable = TRUE, clickable = FALSE, t_id = paste0(condition, "_DEGs"),
                             clickable_text = ""))
        level <- "global"
        title <- "Global"
        plotter$hash_vars$condition_DEGs <- condition_DEGs$markers[["global"]]
        DEG_legend <- paste0("<p>", condition_DEGs$meta$high, " (positive log2FC) vs ",
                             condition_DEGs$meta$low, " (negative log2FC). </p>")
        cat(DEG_legend)
        cat(plotter$prettify_div(plotter$static_plot_main("condition_DEGs", custom_format = TRUE,
                                 plotting_function = DEGs_volcano), preset = "magic"))
        html_code <- plotter$prettify_div(plotter$table(list(id = "condition_DEGs", header = NULL, row_names = NULL,
                                                        table_rownames = FALSE, styled = "dt",
                                                        func = get_top_DEGs)), preset = "magic")
        cat(plotter$create_title("Global DEGenes table", "global DEG table", hlevel = 3, indexable = FALSE,
                                  clickable = TRUE, t_id = "global_DEG_table", clickable_text = ""))
        cat(plotter$create_collapsable_container(id = "global_DEG_table", html_code = html_code))
        samples_html <- vector(mode = "character", length = length(condition_DEGs) - 1)
        for (j in seq(length(condition_DEGs$markers) - 1)) {
            level <- names(condition_DEGs$markers)[j]
            title <- paste0("Cluster ", level)
            plotter$hash_vars$condition_DEGs <- condition_DEGs$markers[[j]]
            if(FALSE %in% condition_DEGs$markers[[j]]) {
                main <- plotter$prettify_div(paste0("<p>Identity ", level, " contained exclusive pairs,
                                         DEG analysis was not possible."), preset = "magic")
                samples_html[[j]] <- main
            }else{
                main <- plotter$prettify_div(plotter$static_plot_main("condition_DEGs", custom_format = TRUE,
                                 plotting_function = DEGs_volcano), preset = "magic")
                table_code <- plotter$prettify_div(plotter$table(list(id = "condition_DEGs", header = NULL,
                                                                 row_names = NULL, table_rownames = FALSE,
                                                                 styled = "dt", func = get_top_DEGs)),
                                                   preset = "magic")
                table_title <- plotter$create_title(paste0(title, " DEGenes table"), paste0(title," DEG table"), hlevel = 3,
                                         indexable = FALSE, clickable = TRUE, t_id = paste0(title, "_DEG_table"),
                                         clickable_text = "")
                table_container <- plotter$create_collapsable_container(id = paste0(title, "_DEG_table"),
                                                                        html_code = table_code)
                samples_html[[j]] <- paste(DEG_legend, main, table_title, table_container, collapse = "\n")
            }
        }
        samples_html <- paste(samples_html, collapse = "\n")
        cat(plotter$create_title(paste0(condition, " DEG analysis by cluster"), paste0(condition, " DEG clusters"),
                                 hlevel = 2, indexable = FALSE, clickable = TRUE,
                                 t_id = paste0(condition, "_cluster_DEG"), clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(condition, "_cluster_DEG"), html_code = samples_html))
    }
end.rcode-->

<!--begin.rcode subset_titles, eval = !is.null(plotter$hash_vars$subset_seu)
    cat(plotter$create_title(paste0("Responses of different ", int_columns[1], "s to ", int_columns[2], " variation"),
                             "subsets_title", hlevel = 1, indexable = TRUE, clickable = FALSE, t_id = "subsets_title",
                             clickable_text = ""))
    cat(paste0("<p>In this next section of the report, clustering and DEG analysis is shown for each group in the 
                \"", int_columns[1], "\" experimental category. This will allow the analysis of the \"", int_columns[2],
               "\"\n factor on each subgroup independently.</p>"))
end.rcode-->

<!--begin.rcode subset_Complete_UMAP, eval = !is.null(plotter$hash_vars$subset_seu)
    cat(paste0("<p>These UMAPs are subsets of the original UMAP, showing only each group in the
                \"", int_columns[1], "\" experimental category. Similar to the global UMAP splits</p>"))
    for(i in seq(length(plotter$hash_vars$subset_seu))) {
        plotter$hash_vars$current_subset <- plotter$hash_vars$subset_seu[[i]]
        value <- unique(plotter$hash_vars$current_subset@meta.data[[int_columns[1]]])
        cat(plotter$create_title(paste(value, "dimensionality reduction", sep = " "), paste0(value, " dimreds"), hlevel = 2,
                                indexable = FALSE, clickable = FALSE, t_id = paste0(value, "_dimreds"), clickable_text = ""))
        reduction <- "umap"
        label <- TRUE
        group.by <- split.by <- NULL
        cat(plotter$prettify_div(plotter$static_plot_main("current_subset", custom_format = TRUE, plotting_function = Custom_DimPlot),
                                 preset = "magic"))
    }
    
end.rcode-->

<!--begin.rcode subset_umap_splits, eval = !is.null(plotter$hash_vars$subset_seu)
    label <- FALSE
    split.by <- int_columns[2]
    for(i in seq(length(plotter$hash_vars$subset_seu))) {
        plotter$hash_vars$current_subset <- plotter$hash_vars$subset_seu[[i]]
        value <- unique(plotter$hash_vars$current_subset@meta.data[[int_columns[1]]])
        cat(plotter$create_title(paste(value, "split by", int_columns[2], sep = " "), paste0(value, " splits by ", int_columns[2]), hlevel = 2,
                                indexable = FALSE, clickable = TRUE, t_id = paste0(value, "_splits_by_", int_columns[2]), clickable_text = ""))
        html_code <- plotter$prettify_div(plotter$static_plot_main("current_subset", custom_format = TRUE,
                                          plotting_function = Custom_DimPlot), preset = "magic")
        cat(plotter$create_collapsable_container(id = paste0(value, "_splits_by_", int_columns[2]), html_code = html_code))
    }
end.rcode-->

<!--begin.rcode subset_umap_groups, eval = !is.null(plotter$hash_vars$subset_seu)
    label <- FALSE
    split.by <- NULL
    group.by <- int_columns[2]
    for(i in seq(length(plotter$hash_vars$subset_seu))) {
        plotter$hash_vars$current_subset <- plotter$hash_vars$subset_seu[[i]]
        value <- unique(plotter$hash_vars$current_subset@meta.data[[int_columns[1]]])
        cat(plotter$create_title(paste(value, "grouped by", int_columns[2], sep = " "), paste0(value, " groups by ", int_columns[2]), hlevel = 2,
                                indexable = FALSE, clickable = TRUE, t_id = paste0(value, "_groups_by_", int_columns[2]), clickable_text = ""))
        html_code <- plotter$prettify_div(plotter$static_plot_main("current_subset", custom_format = TRUE,
                                          plotting_function = Custom_DimPlot), preset = "magic")
        cat(plotter$create_collapsable_container(id = paste0(value, "_groups_by_", int_columns[2]), html_code = html_code))
    }
end.rcode-->

<!--begin.rcode subset_DEGs, eval = !is.null(plotter$hash_vars$subset_DEGs)
    for(i in seq(length(plotter$hash_vars$subset_DEGs))) {
        subset <- names(plotter$hash_vars$subset_DEGs)[i]
        cat(plotter$create_title(paste0(subset, " differential expression analysis"), paste0(subset, " DEG"), hlevel = 1, indexable = FALSE,
                                 clickable = FALSE, t_id = paste0(subset, "_DEG"), clickable_text = ""))
        cat(paste0("<p>These DEGs have been calculated independently for the \"", subset, "\"
            value of the \"", int_columns[1], "\" factor. </p>"))
        subset_meta <- plotter$hash_vars$subset_DEGs[[subset]]$meta
        subset_DEG <- plotter$hash_vars$subset_DEGs[[subset]]$markers
        level <- "global"
        title <- "Global"
        plotter$hash_vars$condition_DEGs <- subset_DEG[["global"]]
        subset_legend <- paste0("<p>", subset_meta$high, " (positive log2FC) vs ",
                                 subset_meta$low, " (negative log2FC). </p>")
        cat(subset_legend)
        cat(plotter$prettify_div(plotter$static_plot_main("condition_DEGs", custom_format = TRUE,
                                                          plotting_function = DEGs_volcano), preset = "magic"))
        html_code <- plotter$prettify_div(plotter$table(list(id = "condition_DEGs", header = NULL, row_names = NULL,
                                                            table_rownames = FALSE, styled = "dt",
                                                            func = get_top_DEGs)), preset = "magic")
        html_code <- paste(subset_legend, html_code, sep = "\n")
        cat(plotter$create_title(paste0(subset, " global DEGenes table"), paste0(subset, " global DEG table"), hlevel = 3, indexable = FALSE,
                                      clickable = TRUE, t_id = paste0(subset, "_global_DEG_table"), clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(subset, "_global_DEG_table"), html_code = html_code))
        subset_html <- vector(mode = "character", length = length(subset_DEG) - 1)
        for(j in seq(length(subset_DEG) - 1)) {
            level <- names(subset_DEG)[j]
            title <- paste0("Cluster ", level)
            plotter$hash_vars$condition_DEGs <- subset_DEG[[j]]
            if(FALSE %in% subset_DEG[[j]]) {
                    main <- plotter$prettify_div(paste0("<p>Cluster ", j, "contained exclusive clusters,
                                             DEG analysis was not possible."), preset = "magic")
                    subset_html <- main
            }else{
                main <- plotter$prettify_div(plotter$static_plot_main("condition_DEGs", custom_format = TRUE,
                                 plotting_function = DEGs_volcano), preset = "magic")
                table_code <- plotter$prettify_div(plotter$table(list(id = "condition_DEGs", header = NULL,
                                                                 row_names = NULL, table_rownames = FALSE,
                                                                 styled = "dt", func = get_top_DEGs)),
                                                  preset = "magic")
                table_title <- plotter$create_title(paste0(title, " DEGenes table"), paste0(subset, title," DEG table"), hlevel = 3,
                                         indexable = FALSE, clickable = TRUE, t_id = paste0(subset, title, "_DEG_table"),
                                         clickable_text = "")
                table_container <- plotter$create_collapsable_container(id = paste0(subset, title, "_DEG_table"),
                                                                        html_code = table_code)
                subset_html[[j]] <- paste(subset_legend, main, table_title, table_container, collapse = "\n")
            }
        }
        subset_html <- paste(subset_html, collapse = "\n")
        cat(plotter$create_title(paste0(subset, " DEG analysis by cluster"), paste0(subset, " DEG clusters"),
                                 hlevel = 2, indexable = FALSE, clickable = TRUE,
                                 t_id = paste0(subset, "_cluster_DEG"), clickable_text = ""))
        cat(plotter$create_collapsable_container(id = paste0(subset, "_cluster_DEG"), html_code = subset_html))
    }

end.rcode-->

<!--begin.rcode query_title, eval = !is.null(plotter$hash_vars$target_genes)
    cat(plotter$create_title("Query gene analysis", "query_title", hlevel = 1,
                              indexable = TRUE, clickable = FALSE, t_id = "query_title",
                              clickable_text = ""))
end.rcode-->

<!--begin.rcode query_exp, eval = !is.null(plotter$hash_vars$query_exp)
    cat(plotter$create_title("Query gene expression heatmap", "query_heatmap", hlevel = 2,
                              indexable = FALSE, clickable = FALSE, t_id = "query_heatmap",
                              clickable_text = ""))
    cat("<p>This plot represents gene expression profile across samples of query genes.
         Represented as the natural logarithm of count ratio, multiplied by a scale factor
         (see config file for exact value of scale factor).</p>")
    cat(plotter$prettify_div(plotter$heatmap(list(id = "query_exp",
                             title = "Query gene expression across samples",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE)), preset = "magic"))
end.rcode-->

<!--begin.rcode query_pct, eval = !is.null(plotter$hash_vars$query_pct)
    cat(plotter$create_title("Query gene cell percentages", "query_samples", hlevel = 2,
                              indexable = FALSE, clickable = FALSE, t_id = "query_samples",
                              clickable_text = ""))
    cat(paste0("This plot represents the percentage of cells that express the query genes in each sample."))
    cat(plotter$prettify_div(plotter$heatmap(list(id = "query_pct",
                             title = "Percentage of cells expressing query gene",
                             header = NULL, text = FALSE, row_names = NULL,
                             transpose = TRUE)), preset = "magic"))
end.rcode-->

<!--begin.rcode query_cluster_pct, eval = !is.null(plotter$hash_vars$query_cluster_pct)
    query_clusters <- vector(mode = "character", length = length(plotter$hash_vars$query_cluster_pct))
    for(i in seq(length(plotter$hash_vars$query_cluster_pct))) {
        plotter$hash_vars$query_combo <- plotter$hash_vars$query_cluster_pct[[i]]
        name <- names(plotter$hash_vars$query_cluster_pct)[i]
        query_clusters[i] <- plotter$prettify_div(plotter$heatmap(list(id = "query_combo", title = name,
                                                  header = NULL, text = FALSE, row_names = NULL, 
                                                  transpose = TRUE)), preset = "magic")
    }
    html_code <- paste(query_clusters, collapse = "\n")
    cat(plotter$create_title("Query gene cell percentages by cluster", "query cluster", hlevel = 2,
                              indexable = FALSE, clickable = TRUE, t_id = "query_cluster",
                              clickable_text = ""))
    cat(plotter$create_collapsable_container(id = "query_cluster", html_code = html_code))
end.rcode-->

<!--begin.rcode query_genes, eval = !is.null(plotter$hash_vars$target_genes)
    cat(plotter$create_title("Query genes distribution", "query genes distribution", hlevel = 2,
                              indexable = FALSE, clickable = TRUE, t_id = "query_distrib",
                              clickable_text = ""))
    paragraph <- "<p>These genes have <strong>NOT</strong> been used to annotate clusters</p>"
    genes_code <- vector(mode = "character", length = length(plotter$hash_vars$target_genes))
    names(genes_code) <- names(plotter$hash_vars$target_genes)
    for(element_name in names(plotter$hash_vars$target_genes)) {
      features <- plotter$hash_vars$target_genes[[element_name]]
      title <- plotter$create_title(paste0("Query gene group: ", element_name),
                                    paste0(element_name, " distr"),
                                    hlevel = 2, indexable = FALSE, clickable = FALSE,
                                    t_id = paste0(element_name, "_distr"), clickable_text = "")
      if(!any(features %in% rownames(SeuratObject::GetAssayData(plotter$hash_vars$seu)))) {
          element_code <- "<p>None of the features in this group have been detected in dataset</p>"
      } else {
          code <- plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                                       plotting_function = Custom_DotPlot), preset = "magic")
          table_title <- plotter$create_title(paste0(element_name, " query table"),
                                              paste0(element_name, " Query Table"),
                                              hlevel = 3, indexable = FALSE, clickable = TRUE,
                                              t_id = paste0(element_name, "_query_table"), clickable_text = "")
          table <- plotter$prettify_div(plotter$table(list(id = "markers", header = NULL, row_names = NULL,
                                                      table_rownames = FALSE, styled = "dt", func = subset_table)),
                                                      preset = "magic")
          table <- plotter$create_collapsable_container(id = paste0(element_name, "_query_table"),
                                                        html_code = table)
          element_code <- paste(code, table_title, table, sep = "\n")
      }
      genes_code[element_name] <- paste(title, element_code, sep = "\n")
    }
    genes_code <- paste(genes_code, collapse = "\n")
    genes_code <- paste(paragraph, genes_code, sep = "\n")
    cat(plotter$create_collapsable_container(id = "query_distrib", html_code = genes_code))
end.rcode-->

<!--begin.rcode Query_patterns, eval = !is.null(plotter$hash_vars$target_genes)
    cat(plotter$create_title("Query expression map", "query maps", hlevel = 3, indexable = FALSE,
                              clickable = FALSE, t_id = "query_maps", clickable_text = ""))
    expressed_genes <- rownames(SeuratObject::GetAssayData(plotter$hash_vars$seu, "RNA"))
    for(element_name in names(plotter$hash_vars$target_genes)) {
        for(feature in plotter$hash_vars$target_genes[[element_name]]) {
            if(feature %in% expressed_genes) {
                cat(plotter$create_title(paste0("Query gene group: ", element_name),
                                         paste0(element_name, " map"), hlevel = 3, indexable = FALSE,
                                         clickable = FALSE, t_id = paste0(element_name, "_map"),
                                         clickable_text = ""))
                cat(plotter$prettify_div(plotter$static_plot_main("seu", custom_format = TRUE,
                    plotting_function = Custom_ftplot), preset = "magic"))
            } else {
                cat(paste0("<p>Feature ", feature, " is not significantly expressed.</p>"))
            }
        }
    }
end.rcode-->
