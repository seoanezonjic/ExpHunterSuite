
<!--begin.rcode setup_expression_qc

	custom_PerformanceAnalytics <- function() {
		PerformanceAnalytics::chart.Correlation(R = data_frame, histogram = TRUE, pch = 19, log = "xy")
	}

	custom_heatmap_cor <- function() {
	    gplots::heatmap.2(x = data_frame, symm = TRUE, scale = "none",
	    				  col = colorRampPalette(c("#FFFFCC", "#FD8D3C",
	    				  						"#800026"))(20), trace = "none",
	                      margins = rep(max(nchar(colnames(data_frame))), 2))
  	}

  	custom_heatmap_deseq <- function() {
	    gplots::heatmap.2(x = data_frame, labRow = FALSE, dendrogram = "column",
	    				  trace = "none", srtCol = 45, adjCol = c(1,1),
	    				  col = colorRampPalette(c("#FFFFCC", "#FD8D3C", "#800026"))(20))
  	}

  	custom_coverage_plot <- function(input) {
  		ggplot2::ggplot(input, ggplot2::aes(x = sample_rank,
  											y = counted_frac)) +
        ggplot2::geom_point(size = 3) +
        cowplot::theme_cowplot() +
        cowplot::background_grid() +
        ggplot2::labs(title = "Read Counts", x="Sample Rank (total reads)",
        			  y = "% counts read") +
        ggplot2::ylim(c(0,NA)) +
        ggplot2::scale_color_brewer(palette="Dark2")
  	}

  	df_for_lineplot <- function(df) {
  		rownames(df) <- xAxis
  	}

    make_top_n_expression_table <- function(count_data, n = 5) {
	    top_n_index <- order(rowSums(count_data), decreasing=TRUE)[1:n]
	    sample_totals <- colSums(count_data)
	    top_n_count <- count_data[top_n_index, ]
	    top_n_perc <- apply(top_n_count, 1,
	    					function(x) round(x / sample_totals * 100, 3))
	    return(top_n_perc)
	}

	plot_cpm_density <- function(ggplot_obj) { 
	   ggplot_obj + ggplot2::aes(x = value, colour = variable) +
	   ggplot2::geom_density() + ggplot2::xlab(expression(log[2](cpm + 1))) +
	   ggplot2::geom_vline(xintercept = log2(opt$reads + 1))
	}

end.rcode-->

<!--begin.rcode expression_qc_title
	cat(plotter$create_title("Data quality control (QC)", id = "main_qc_title", hlevel = 2, indexable = TRUE))
	cat(plotter$create_title("Correlation between samples", id = "corr_title", hlevel = 3, indexable = FALSE))
end.rcode-->

<p>Here we show scatterplots comparing expression levels for all genes between the different samples, for i) all controls, ii) all treatment samples and iii) for all samples together.
These plots will only be produced when the total number of samples to compare within a group is less than or equal to 10.</p>

<!--begin.rcode corr_plot_control, echo = FALSE, fig.height=12, fig.width=12, eval=length(plotter$hash_vars$index_control_cols) <= 10, results='asis', warning = FALSE
  	cat(plotter$create_title("Correlation between control samples", id = "main_title", hlevel = 4,
                            indexable = FALSE))
  	cat("<p>Replicates within the same group tend to have Pearson correlation coefficients >= 0.96. Lower values may indicate problems with the samples.</p>")
	plotter$hash_vars$raw_control <- plotter$hash_vars$raw_filter[plotter$hash_vars$index_control_cols]
	cat(plotter$prettify_div(plotter$static_plot_main("raw_control", resizable = TRUE, custom_format = TRUE, plotting_function = custom_PerformanceAnalytics, plot_type = "autoplot"), preset = "magic"))
end.rcode-->

<!--begin.rcode corr_plot_treatment, echo = FALSE, fig.height=12, fig.width=12, eval=length(plotter$hash_vars$index_treatmn_cols) <= 10, results='asis', warning = FALSE
	cat(plotter$create_title("Correlation between treatment samples", id = "main_title", hlevel = 4,
                         	 indexable = FALSE))
	cat("<p>Replicates within the same group tend to have Pearson correlation coefficients >= 0.96. Lower values may indicate problems with the samples.</p>")
	plotter$hash_vars$raw_treatment <- plotter$hash_vars$raw_filter[plotter$hash_vars$index_treatmn_cols]
	cat(plotter$prettify_div(plotter$static_plot_main("raw_treatment", resizable = TRUE, custom_format = TRUE, plotting_function = custom_PerformanceAnalytics, plot_type = "autoplot"), preset = "magic"))
end.rcode-->

<!--begin.rcode corr_plot_all , echo = FALSE, fig.height=12, fig.width=12, eval=length(plotter$hash_vars$index_control_cols) + length(plotter$hash_vars$index_treatmn_cols) <= 10, results='asis', warning = FALSE
	cat(plotter$create_title("Correlation between samples: All vs all replicates", id = "corr_title",
							 hlevel = 4, indexable = FALSE))
	cat("<p>Correlation coefficients tend to be slightly higher between replicates from the same group than between
		replicates from different groups. If this is not the case, it may indicate mislabelling or other
		potential issues.</p>")
	cat(plotter$prettify_div(plotter$static_plot_main("raw_filter", resizable = TRUE, custom_format = TRUE, plotting_function = custom_PerformanceAnalytics, plot_type = "autoplot"), preset = "magic"))
end.rcode-->

<!--begin.rcode heatmap_corr, eval=!"externalDEA" %in% names(plotter$hash_vars$all_counts_for_plotting), echo = FALSE, fig.height=12, fig.width=12
	cat(plotter$create_title("Heatmap and clustering showing correlation between replicates", id = "heat_corr_title",
							 hlevel = 3, indexable = TRUE))
	cat("<p><strong>BROWN: higher correlation; YELLOW: lower correlation</strong></p>")
	col <- colorRampPalette(c("#FFFFCC", "#FD8D3C", "#800026"))(20)
	plotter$hash_vars$cor_filter <- cor(plotter$hash_vars$raw_filter)
	cat(plotter$prettify_div(plotter$static_plot_main("cor_filter", resizable = TRUE, custom_format = TRUE, plotting_function = custom_heatmap_cor, plot_type = "autoplot"), preset = "maigic"))
end.rcode-->

<!--begin.rcode config_expression_PCA, echo = FALSE, results = "asis", warning = TRUE, message = TRUE
	plotter$hash_vars$pca_data <- plotter$hash_vars$PCA_res$all_genes$pca_data
	plotter$hash_vars$dim_to_keep <- plotter$hash_vars$PCA_res$all_genes$dim_to_keep
	plotter$hash_vars$dim_data <- plotter$hash_vars$PCA_res$all_genes$dim_data
	plotter$hash_vars$dim_data_merged <- plotter$hash_vars$PCA_res$all_genes$dim_data_merged
	plotter$hash_vars$res.hcpc <- plotter$hash_vars$PCA_res$all_genes$res.hcpc
	plotter$hash_vars$last_title <- 3
	plotter$hash_vars$multivar_type <- "pca"
	plotter$hash_vars$main_cat <- "treat"
	called_from <- "expression_qc"
end.rcode-->

<!--begin.rcode expression_pca
	child <- knitr::knit_expand(file.path(template_folder, "facto_miner.txt"))
	cat(knitr::knit_child(text = child, quiet = TRUE), sep = "\n")
end.rcode-->

<!--begin.rcode density_distribution_cpm, echo = FALSE, warning=FALSE
	cat(plotter$create_title("Visualizing normalization results", id = "density_title", hlevel = 3,
							 indexable = TRUE))
	cat(paste0("<p>These boxplots show the distributions of count data before and after normalization (shown for
		normalization method", names(plotter$hash_vars$all_data_normalized)[1]))
	cat(plotter$create_title("Representation of cpm unfiltered data", id = "cpm_repr", hlevel = 4,
							 indexable = FALSE))
	cpm_no_zeros <- plotter$hash_vars$cpm_table[!rowSums(plotter$hash_vars$cpm_table) == 0, ]
	log2cpm <- log2(cpm_no_zeros + 1)
	plotter$hash_vars$cpm_long <- reshape2::melt(log2cpm, measure.vars=colnames(log2cpm))
	colnames(plotter$hash_vars$cpm_long)[2] <- "variable"
	cat(plotter$prettify_div(plotter$static_ggplot_main("cpm_long", resizable = TRUE, header = NULL, row_names = NULL,
           plotting_function = plot_cpm_density), preset = "magic"))
end.rcode-->

<!--begin.rcode density_distribution_raw, echo = FALSE, warning=FALSE
	cat(plotter$create_title("Before normalization", id = "before_title", hlevel = 4,
						     indexable = FALSE))
	log2raw_counts <- log2(plotter$hash_vars$raw_filter + 1)
	plotter$hash_vars$raw_long <- reshape2::melt(log2raw_counts, measure.vars=colnames(log2raw_counts))
	cat(plotter$prettify_div(plotter$static_ggplot_main("raw_long", resizable = TRUE, header = NULL, row_names = NULL,
	        plotting_function = plot_cpm_density), preset = "magic"))
end.rcode-->

<!--begin.rcode density_distribution_norm, echo = FALSE, warning=FALSE
	cat(plotter$create_title("After normalization", id = "after_title", hlevel = 4,
						     indexable = FALSE))
	log2norm_counts <- log2(plotter$hash_vars$all_data_normalized[["default"]] + 1)
	plotter$hash_vars$norm_long <- reshape2::melt(log2norm_counts, measure.vars=colnames(log2norm_counts))
	cat(plotter$prettify_div(plotter$static_ggplot_main("raw_long", resizable = TRUE, header = NULL, row_names = NULL,
	        plotting_function = plot_cpm_density), preset = "magic"))
end.rcode-->

<!--begin.rcode coverage_plot_head, echo = FALSE, warning = FALSE, results='asis'
	cat(plotter$create_title("Count metrics by sample ranks", id = "count_metrics_title",
		 hlevel = 2, indexable = TRUE))
end.rcode-->

<!--begin.rcode count_metrics_title

	if(!is.null(plotter$hash_vars$library_sizes)) {
		title <- "Sample rank versus total reads in raw FASTQ"
	}else{
		title <- "Sample rank versus total counts"
	}
	cat(plotter$create_title(title, hlevel = 3, id = "coverage_plot_title", indexable = TRUE))
end.rcode-->

<!--begin.rcode coverage_plot, echo = FALSE, warning = FALSE
	if(!is.null(plotter$hash_vars$library_sizes)) {
		head <- "Sample rank versus total reads in raw FASTQ"
		xtitle <- "Sample Rank (total reads)"
		ytitle <- "Reads"
		yAxis <- "total_reads"
		count_fields <- c(1, 2, 4)
	}else{
		head <- "Sample rank versus total counts"
		xtitle <- "Sample Rank (total counts)"
		ytitle <- "Counts"
		yAxis <- "total_counts"
		count_fields <- 1:3
	}
    cat(plotter$prettify_div(plotter$scatter2D(list(id = "coverage_df", text = "dynamic", header = NULL,
    						 row_names = TRUE, xAxis = "sample_rank", title = head, x_label = xtitle,
    						 y_label = ytitle, fields = count_fields, text = FALSE)), preset = "magic"))
    cat(plotter$prettify_div(paste0("<p> Sample rank: the position a sample holds after sorting by total ",
    						 tolower(ytitle), ".</p>"), preset = "magic"))
end.rcode-->

<!--begin.rcode coverage_plot_frac, eval = !is.null(plotter$hash_vars$coverage_df$counted_frac), echo = FALSE, warning = FALSE
	cat(plotter$create_title("Fraction counts read sorted by rank", hlevel = 3, id = "coverage_frac_title",
						     indexable = TRUE))
    cat(plotter$prettify_div(plotter$scatter2D(list(id = "coverage_df", text = "dynamic", header = NULL,
    						 row_names = TRUE, xAxis = "sample_rank", title = head, x_label = xtitle,
    						 y_label = "% counts read", text = FALSE, fields = c(1, 3, 4))), preset = "magic"))
end.rcode-->

<!--begin.rcode coverage_plot_frac_text, eval = !is.null(plotter$hash_vars$coverage_df$counted_frac),  echo = FALSE, warning = FALSE, results='asis'
	cat('Counted fraction is the percentage of reads that map to a gene (only available if total reads provided)')
end.rcode-->

<!--begin.rcode exp_genes_plot, echo = FALSE, warning = FALSE
    cat(plotter$create_title("Statistics of expressed genes", hlevel = 3, id = "mean_plot_title",
   							 indexable = TRUE))
	cat(plotter$prettify_div(plotter$line(list(id = "exp_genes_df", title = "Statistics of expressed genes",
											   config = list(graphOrientation = 'vertical'), header = NULL,
											   row_names = NULL, text = FALSE, smp_attr = 3,
											   fields = c(2, 4:5), xlabel = "Nº of genes")),
											   preset = "magic"))
end.rcode-->

<p>Samples are ranked by total expressed genes. Union of expressed genes represents the cumulative total expressed genes (sum of
all genes expressed in any sample up to current sample, expected to increase with sample rank). Intersection of expressed genes
represents the cumulative intersection of expressed genes (sum of genes expressed in every sample up to current sample, expected
to decrease with sample rank)</p>

<!--begin.rcode mean_counts_plot, echo = FALSE, warning = FALSE
   cat(plotter$create_title("Mean count distribution by filter", hlevel = 4, id = "mean_plot_title",
   							 indexable = FALSE))
   cat(plotter$prettify_div(plotter$static_ggplot_main("mean_counts_df", resizable = TRUE, header = NULL, row_names = NULL,
                                  plotting_function = function(ggplot_obj) { 
   ggplot_obj + ggplot2::aes(x = counts, col = filter) +
   ggplot2::geom_density(ggplot2::aes(y=..count..)) +
					 ggplot2::scale_x_log10() +
					 ggplot2::labs(x = "Mean counts per gene", y = "Frequency") +
				     ggplot2::guides(col = ggplot2::guide_legend(title = NULL)) +
				     ggplot2::scale_color_brewer(palette = "Paired") +
				     cowplot::theme_cowplot() +
				     ggplot2::theme(legend.position = "top", legend.justification="center",
				           			legend.background = ggplot2::element_rect(color = NA))
   }), preset = "magic"))

   cat("<p>This plot represents the mean counts distribution per gene, classified by filters</p>")
   cat(plotter$create_title("Gene counts variance distribution", id = "counts_distr_title", hlevel = 3,
   					       indexable = TRUE))
   cat("<p> Variance of gene counts across samples are represented. Genes with lower variance than selected threshold (dashed grey line) were filtered out. </p>")
end.rcode-->

<!--begin.rcode variance_dist, echo = FALSE, eval=!grepl("F", opt$modules), warning = FALSE, message = FALSE

plotter$hash_vars$gene_count_var <- data.frame(variance = plotter$hash_vars$var_filter[["variance_dis"]])

cat(plotter$prettify_div(plotter$static_ggplot_main("gene_count_var", resizable = TRUE, header = NULL, row_names = NULL,
								 plotting_function = function(ggplot_obj) {
								 	ggplot_obj + ggplot2::aes(x = variance) +
								 	ggplot2::geom_density() +
								 	ggplot2::geom_vline(xintercept = plotter$hash_vars$var_filter[["thr"]],
								 	linetype = "dashed", color = "grey")
								 	}), preset = "magic"))
end.rcode-->

<!--begin.rcode all_norm_head, echo=FALSE, results='asis'

cat(plotter$create_title("Samples differences by all counts normalized", id = "all_norm_title", hlevel = 3,
						 indexable = TRUE))

cat("<p>All counts were normalizated by default (see options below) algorithm. These counts have been scaled by
	log10 and plotted in a heatmap.</p>")

end.rcode-->

<!--begin.rcode heatmap_all_norm_plot, echo = FALSE, fig.height=12, fig.width=12
	cat(plotter$create_title("Sample differences by total normalized counts", id = "heatmap_norm",
						 	 hlevel = 4, indexable = FALSE))
	deseq_normalized_data <- plotter$hash_vars$all_data_normalized[['default']]
	if (nrow(plotter$hash_vars$all_data_normalized[['default']]) <= 50000) { 
		plotter$hash_vars$deseq_normalized_data_mtx <- log10(data.matrix(deseq_normalized_data) + 1)
		cat(plotter$prettify_div(plotter$static_plot_main("deseq_normalized_data_mtx", resizable = TRUE, custom_format = TRUE,
								 plotting_function = custom_heatmap_deseq, plot_type = "autoplot"), preset = "magic"))
	} else {
		cat("<p>This plot cannot be generated because more than 50 000 genes have passed the filters, which can cause memory problems.</p>")
	}
end.rcode-->

<!--begin.rcode top_n_expression, results='asis', echo=FALSE, warning=FALSE, message=FALSE
	cat(plotter$create_title("Percentages of reads per sample mapping to the most highly expressed genes",
							 id = "pct_map", hlevel = 3, indexable = TRUE))
	cat(plotter$table(list(id = "raw_filter", header = NULL, row_names = NULL, styled = "dt", func = make_top_n_expression_table)))
end.rcode-->
